<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YJBlog — YJ的博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.yanjiazhen.com/"/>
  <updated>2017-07-31T04:33:46.000Z</updated>
  <id>http://www.yanjiazhen.com/</id>
  
  <author>
    <name>YJ</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript中数据类型判断</title>
    <link href="http://www.yanjiazhen.com/2016/12/js-data-type.html"/>
    <id>http://www.yanjiazhen.com/2016/12/js-data-type.html</id>
    <published>2016-12-20T04:13:11.000Z</published>
    <updated>2017-07-31T04:33:46.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>在JS中，用得较多的数据类型判断的方式有 <code>typeof</code>、<code>instanceof</code>、<code>constructor</code> ；下面，我来封装另一种数据类型判断方法</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> dataType=[<span class="string">'Number'</span>,<span class="string">'String'</span>,<span class="string">'Function'</span>,<span class="string">'Boolean'</span>,<span class="string">'Object'</span>,<span class="string">'Array'</span>,<span class="string">'Date'</span>];</div><div class="line"><span class="keyword">var</span> common=&#123;&#125;;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&amp;amp;dataType.length;i++)&#123;</div><div class="line">    common[<span class="string">'is'</span>+dataType[i]]=(<span class="function"><span class="keyword">function</span>(<span class="params">_type</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">_data</span>)</span>&#123;</div><div class="line">            <span class="keyword">return</span> &#123;&#125;.toString.call(_data) == <span class="string">'[object '</span>+_type+<span class="string">']'</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;)(dataType[i]);</div><div class="line">&#125;</div><div class="line"></div><div class="line">common.isNumber(<span class="number">123</span>);   <span class="comment">// true</span></div><div class="line">common.isNumber(<span class="string">'123'</span>); <span class="comment">// false</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在JS中，用得较多的数据类型判断的方式有 &lt;code&gt;typeof&lt;/code&gt;、&lt;code&gt;instanceof&lt;/code&gt;、&lt;code&gt;constructor&lt;/code&gt; ；下面，我来封装另一种数据类型判断方法&lt;/p&gt;
&lt;/blockquo
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.yanjiazhen.com/categories/javascript/"/>
    
    
      <category term="JS" scheme="http://www.yanjiazhen.com/tags/js/"/>
    
      <category term="JavaScript" scheme="http://www.yanjiazhen.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>CSS3弹性布局：flex</title>
    <link href="http://www.yanjiazhen.com/2016/12/css3-flex.html"/>
    <id>http://www.yanjiazhen.com/2016/12/css3-flex.html</id>
    <published>2016-12-18T08:33:19.000Z</published>
    <updated>2017-07-31T04:43:18.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>CSS3有一个非常强大的属性：flex，借助他就能用简单的语法实现自适应的弹性布局。目前，它已经得到了所有浏览器的支持，我们可以很安全地使用这项功能。</p>
</blockquote>
<h3 id="flex-direction-设置方向"><a href="#flex-direction-设置方向" class="headerlink" title="flex-direction 设置方向"></a>flex-direction 设置方向</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">    <span class="attribute">flex-direction </span>: row | row-reverse | column | column-reverse;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>flex-direction:row</strong> 从左到右排列(默认) </p>
<p><span style="color:red;">*点击右上角可查看源码详情</span></p>
<iframe height="265" scrolling="no" title="flex-direction:row" src="//codepen.io/yanjiazhen/embed/XMjRRg/?height=265&theme-id=0&default-tab=css,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="http://codepen.io/yanjiazhen/pen/XMjRRg/" target="_blank" rel="external">flex-direction:row</a> by YJ (<a href="http://codepen.io/yanjiazhen" target="_blank" rel="external">@yanjiazhen</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.<br></iframe>

<p><strong>flex-direction:row-reverse</strong> 从右到左排列</p>
<iframe height="265" scrolling="no" title="flex-direction:row-reverse" src="//codepen.io/yanjiazhen/embed/xqELKx/?height=265&theme-id=0&default-tab=css,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="http://codepen.io/yanjiazhen/pen/xqELKx/" target="_blank" rel="external">flex-direction:row-reverse</a> by YJ (<a href="http://codepen.io/yanjiazhen" target="_blank" rel="external">@yanjiazhen</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.<br></iframe>

<p><strong>flex-direction:column</strong> 从上到下排列</p>
<iframe height="265" scrolling="no" title="flex-direction:column" src="//codepen.io/yanjiazhen/embed/RpGZPp/?height=265&theme-id=0&default-tab=css,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="http://codepen.io/yanjiazhen/pen/RpGZPp/" target="_blank" rel="external">flex-direction:column</a> by YJ (<a href="http://codepen.io/yanjiazhen" target="_blank" rel="external">@yanjiazhen</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.<br></iframe>

<p><strong>flex-direction:column-reverse</strong> 从下到上排列</p>
<iframe height="265" scrolling="no" title="flex-direction:colum-reverse" src="//codepen.io/yanjiazhen/embed/NpRvxz/?height=265&theme-id=0&default-tab=css,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="http://codepen.io/yanjiazhen/pen/NpRvxz/" target="_blank" rel="external">flex-direction:colum-reverse</a> by YJ (<a href="http://codepen.io/yanjiazhen" target="_blank" rel="external">@yanjiazhen</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.<br></iframe>

<h3 id="flex-wrap-控制换行"><a href="#flex-wrap-控制换行" class="headerlink" title="flex-wrap 控制换行"></a>flex-wrap 控制换行</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">    <span class="attribute">flex-direction </span>:  norwap | wrap | wrap-reverse</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>flex-wrap:norwap</strong> 默认情况下不换行</p>
<iframe height="265" scrolling="no" title="flex-wrap:norwap" src="//codepen.io/yanjiazhen/embed/XMjOwV/?height=265&theme-id=0&default-tab=html,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="http://codepen.io/yanjiazhen/pen/XMjOwV/" target="_blank" rel="external">flex-wrap:norwap</a> by YJ (<a href="http://codepen.io/yanjiazhen" target="_blank" rel="external">@yanjiazhen</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.<br></iframe>

<p><strong>flex-wrap:wrap</strong> 第一行在上方</p>
<iframe height="265" scrolling="no" title="flex-wrap:wrap" src="//codepen.io/yanjiazhen/embed/LWRaYX/?height=265&theme-id=0&default-tab=html,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="http://codepen.io/yanjiazhen/pen/LWRaYX/" target="_blank" rel="external">flex-wrap:wrap</a> by YJ (<a href="http://codepen.io/yanjiazhen" target="_blank" rel="external">@yanjiazhen</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.<br></iframe>

<p><strong>flex-wrap:wrap-reverse</strong> 第一行在下方</p>
<iframe height="265" scrolling="no" title="flex-wrap:wrap-reverse" src="//codepen.io/yanjiazhen/embed/peEYvP/?height=265&theme-id=0&default-tab=html,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="http://codepen.io/yanjiazhen/pen/peEYvP/" target="_blank" rel="external">flex-wrap:wrap-reverse</a> by YJ (<a href="http://codepen.io/yanjiazhen" target="_blank" rel="external">@yanjiazhen</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.<br></iframe>

<h3 id="flex-flow-方向和换行"><a href="#flex-flow-方向和换行" class="headerlink" title="flex-flow 方向和换行"></a>flex-flow 方向和换行</h3><p><strong>flex-flow</strong> 属性是方向 <strong>flex-direction(方向)</strong> 属性和 <strong>flex-wrap(换行)</strong> 属性的简写，默认值为 <strong>initial</strong> 表示 <strong>flex-direction: row</strong> 和 <strong>flex-wrap: norwrap</strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">    <span class="attribute">flex-flow</span>: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="order-属性定义项目的排列顺序。数值越小，排列越靠前，默认为0"><a href="#order-属性定义项目的排列顺序。数值越小，排列越靠前，默认为0" class="headerlink" title="order 属性定义项目的排列顺序。数值越小，排列越靠前，默认为0"></a>order 属性定义项目的排列顺序。数值越小，排列越靠前，默认为0</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.item</span>&#123;</div><div class="line">    <span class="attribute">order</span>: &lt;integer&gt;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<iframe height="265" scrolling="no" title="flex_order" src="//codepen.io/yanjiazhen/embed/bqwZRg/?height=265&theme-id=0&default-tab=css,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="http://codepen.io/yanjiazhen/pen/bqwZRg/" target="_blank" rel="external">flex_order</a> by YJ (<a href="http://codepen.io/yanjiazhen" target="_blank" rel="external">@yanjiazhen</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.<br></iframe>

<h3 id="flex-grow-分配多余空间"><a href="#flex-grow-分配多余空间" class="headerlink" title="flex-grow 分配多余空间"></a>flex-grow 分配多余空间</h3><p><span style="color:red;"><strong>flex-grow是flex弹性布局中重要的一个属性，很多时候都需要使用该属性</strong></span><br></p>
<blockquote>
<p>如果将所有项的flex-grow设置为1，则他们将平分剩余空间。如果有一项的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</p>
</blockquote>
<p><strong>看下面的例子理解一下吧：</strong></p>
<iframe height="265" scrolling="no" title="WpGmgZ" src="//codepen.io/yanjiazhen/embed/WpGmgZ/?height=265&theme-id=0&default-tab=html,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="http://codepen.io/yanjiazhen/pen/WpGmgZ/" target="_blank" rel="external">WpGmgZ</a> by YJ (<a href="http://codepen.io/yanjiazhen" target="_blank" rel="external">@yanjiazhen</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.<br></iframe>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;CSS3有一个非常强大的属性：flex，借助他就能用简单的语法实现自适应的弹性布局。目前，它已经得到了所有浏览器的支持，我们可以很安全地使用这项功能。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;flex-direction-设置方向&quot;&gt;
    
    </summary>
    
      <category term="CSS" scheme="http://www.yanjiazhen.com/categories/css/"/>
    
    
      <category term="CSS3" scheme="http://www.yanjiazhen.com/tags/css3/"/>
    
  </entry>
  
  <entry>
    <title>Gulp监听文件更新，实现自动刷新</title>
    <link href="http://www.yanjiazhen.com/2016/10/gulp-refresh.html"/>
    <id>http://www.yanjiazhen.com/2016/10/gulp-refresh.html</id>
    <published>2016-10-20T14:21:46.000Z</published>
    <updated>2017-07-31T07:23:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>对于前段程序员来说，是需要经常修改CSS、JS或HTML后实时查看修改结果的。假如你打开了N个浏览器，如果每次修改后，都要手动刷新浏览器，那你会崩溃的。下面，我们来配置一个Gulp文件，实现修改文件后自动刷新浏览器的。</p>
<p>只要我们按照下面的步骤一步步来，就可以配置成功：</p>
<h4 id="1-全局安装Gulp"><a href="#1-全局安装Gulp" class="headerlink" title="1. 全局安装Gulp"></a>1. 全局安装Gulp</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install --global gulp</div></pre></td></tr></table></figure>
<h4 id="2-我们创建一个项目文件夹-假设命名为：gulp-pro"><a href="#2-我们创建一个项目文件夹-假设命名为：gulp-pro" class="headerlink" title="2. 我们创建一个项目文件夹(假设命名为：gulp-pro)"></a>2. 我们创建一个项目文件夹(假设命名为：gulp-pro)</h4><h4 id="3-初始化package-json文件，在项目根目录-gulp-pro文件中-下执行命令"><a href="#3-初始化package-json文件，在项目根目录-gulp-pro文件中-下执行命令" class="headerlink" title="3. 初始化package.json文件，在项目根目录(gulp-pro文件中)下执行命令"></a>3. 初始化package.json文件，在项目根目录(gulp-pro文件中)下执行命令</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm init</div></pre></td></tr></table></figure>
<p>*执行命令后，不断按回车则可，暂时不需要明白package.json是什么</p>
<h4 id="4-作为项目的开发依赖安装Gulp，在项目根目录下执行命令"><a href="#4-作为项目的开发依赖安装Gulp，在项目根目录下执行命令" class="headerlink" title="4. 作为项目的开发依赖安装Gulp，在项目根目录下执行命令"></a>4. 作为项目的开发依赖安装Gulp，在项目根目录下执行命令</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install gulp --save-dev</div></pre></td></tr></table></figure>
<h4 id="5-安装BrowserSync依赖"><a href="#5-安装BrowserSync依赖" class="headerlink" title="5. 安装BrowserSync依赖"></a>5. 安装BrowserSync依赖</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install browser-sync --save-dev</div></pre></td></tr></table></figure>
<h4 id="6-在项目根目录下创建并配置gulpfile-js文件"><a href="#6-在项目根目录下创建并配置gulpfile-js文件" class="headerlink" title="6. 在项目根目录下创建并配置gulpfile.js文件"></a>6. 在项目根目录下创建并配置gulpfile.js文件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp=<span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line"><span class="keyword">var</span> sync=<span class="built_in">require</span>(<span class="string">'browser-sync'</span>).create();</div><div class="line"></div><div class="line"><span class="comment">//定义一个browsersync任务（自定义任务名称）</span></div><div class="line">gulp.task(<span class="string">'browsersync'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    sync.init(&#123;</div><div class="line">        files:<span class="string">'.'</span>, <span class="comment">//设置监听那些文件修改后自动刷新，.表示所有文件；也可设置为数组，例如：['style/**/*.less']</span></div><div class="line">        server: &#123;</div><div class="line">            baseDir: <span class="string">'.'</span> <span class="comment">//设置服务的根目录</span></div><div class="line">        &#125;,</div><div class="line">        port:<span class="number">3001</span>   <span class="comment">//启动的服务的端口</span></div><div class="line">    &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">////定义默认任务，改任务会执行browsersync</span></div><div class="line">gulp.task(<span class="string">'default'</span>,[<span class="string">'browsersync'</span>]);</div></pre></td></tr></table></figure>
<h4 id="7-运行gulp"><a href="#7-运行gulp" class="headerlink" title="7. 运行gulp"></a>7. 运行gulp</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ gulp</div></pre></td></tr></table></figure>
<p>到这里，你已经成功配置了一个gulp文件。你可以在项目里编辑各种文件了，然后在浏览器访问 <a href="http://http://localhost:3001/" target="_blank" rel="external">http://http://localhost:3001/</a> </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于前段程序员来说，是需要经常修改CSS、JS或HTML后实时查看修改结果的。假如你打开了N个浏览器，如果每次修改后，都要手动刷新浏览器，那你会崩溃的。下面，我们来配置一个Gulp文件，实现修改文件后自动刷新浏览器的。&lt;/p&gt;
&lt;p&gt;只要我们按照下面的步骤一步步来，就可以配
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.yanjiazhen.com/categories/javascript/"/>
    
    
      <category term="JS" scheme="http://www.yanjiazhen.com/tags/js/"/>
    
      <category term="JavaScript" scheme="http://www.yanjiazhen.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript兼容方法总结</title>
    <link href="http://www.yanjiazhen.com/2016/06/js-compatible.html"/>
    <id>http://www.yanjiazhen.com/2016/06/js-compatible.html</id>
    <published>2016-06-12T13:48:34.000Z</published>
    <updated>2017-07-31T06:26:18.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<h3 id="该文章总结我在工作、学习中遇到的JS兼容性问题，所以该文章在后续的时间里应该会有更新的"><a href="#该文章总结我在工作、学习中遇到的JS兼容性问题，所以该文章在后续的时间里应该会有更新的" class="headerlink" title="该文章总结我在工作、学习中遇到的JS兼容性问题，所以该文章在后续的时间里应该会有更新的"></a>该文章总结我在工作、学习中遇到的JS兼容性问题，所以该文章在后续的时间里应该会有更新的</h3><p>Web前端的程序员都应该知道，JS的一些方法在各个浏览器中的写法可能是不一样的。今天，我来总结一些JS的兼容写法</p>
</blockquote>
<h3 id="1-给元素添加事件"><a href="#1-给元素添加事件" class="headerlink" title="1.给元素添加事件"></a>1.给元素添加事件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addEvent</span>(<span class="params">element,event,handler</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(element.addEventListener)&#123;</div><div class="line">        element.addEventListener(event,handler);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//IE</span></div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(element.attachEvent)&#123;</div><div class="line">        element.attachEvent(<span class="string">'on'</span>+event,handler);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        element[<span class="string">'on'</span>+event]=handler;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-移除给元素添加的事件"><a href="#2-移除给元素添加的事件" class="headerlink" title="2.移除给元素添加的事件"></a>2.移除给元素添加的事件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeEvent</span>(<span class="params">element,event,handler</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(element.removeEventListener)&#123;</div><div class="line">        element.removeEventListener(event,handler);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//IE</span></div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(element.detachEvent)&#123;</div><div class="line">        element.detachEvent(<span class="string">'on'</span>+event,handler);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        element[<span class="string">'on'</span>+event]=<span class="literal">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-阻止事件冒泡"><a href="#3-阻止事件冒泡" class="headerlink" title="3.阻止事件冒泡"></a>3.阻止事件冒泡</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">stopEvent</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(event.stopPropagation)&#123;</div><div class="line">        event.stopPropagation();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//IE</span></div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        event.cancelBubble=<span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>IE只支持事件冒泡，不支持事件捕获</p>
</blockquote>
<h3 id="4-获取事件的目标元素"><a href="#4-获取事件的目标元素" class="headerlink" title="4.获取事件的目标元素"></a>4.获取事件的目标元素</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getElement</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">    <span class="comment">// event.srcElement IE的写法</span></div><div class="line">    <span class="keyword">return</span> event.target||event.srcElement;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="5-停止默认事件"><a href="#5-停止默认事件" class="headerlink" title="5.停止默认事件"></a>5.停止默认事件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">stopDefaultEvent</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(event.preventDefault)&#123;</div><div class="line">        event.preventDefault();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        event.returnValue=<span class="literal">false</span>; <span class="comment">// IE</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;h3 id=&quot;该文章总结我在工作、学习中遇到的JS兼容性问题，所以该文章在后续的时间里应该会有更新的&quot;&gt;&lt;a href=&quot;#该文章总结我在工作、学习中遇到的JS兼容性问题，所以该文章在后续的时间里应该会有更新的&quot; class=&quot;headerlink&quot; 
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.yanjiazhen.com/categories/javascript/"/>
    
    
      <category term="JS" scheme="http://www.yanjiazhen.com/tags/js/"/>
    
      <category term="JavaScript" scheme="http://www.yanjiazhen.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript中的作用域和声明提升</title>
    <link href="http://www.yanjiazhen.com/2015/08/javascript-scope-hoisting.html"/>
    <id>http://www.yanjiazhen.com/2015/08/javascript-scope-hoisting.html</id>
    <published>2015-08-19T16:00:00.000Z</published>
    <updated>2017-07-31T06:26:37.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、作用域"><a href="#一、作用域" class="headerlink" title="一、作用域"></a>一、作用域</h2><p>在JavaScript中，作用域有全局作用域和局部作用域两种。全局变量拥有全局作用域，在JavaScript代码中的任何地方都是有定义的。声明在函数内的变量只在函数体内有定义。<br>他们是局部变量，作用域是局部性的。函数参数也是局部变量，它们只在函数体内有定义。</p>
<h3 id="1、全局作用域（Global-Scope）"><a href="#1、全局作用域（Global-Scope）" class="headerlink" title="1、全局作用域（Global Scope）"></a>1、全局作用域（Global Scope）</h3><p>一般来说，全局作用域主要有以下几种：<br><br>(1).使用 <strong>var</strong> 关键字声明的全局变量，在任何地方都可以访问。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> vb1=<span class="number">1</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> vb2=<span class="number">2</span>;</div><div class="line">    <span class="built_in">console</span>.log(vb1);   <span class="comment">// =&gt; 1</span></div><div class="line">    (<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(vb1);   <span class="comment">// =&gt; 1</span></div><div class="line">    &#125;)();</div><div class="line">&#125;</div><div class="line">fun1();</div><div class="line"><span class="built_in">console</span>.log(vb1);   <span class="comment">// =&gt; 1</span></div><div class="line"><span class="built_in">console</span>.log(vb2);   <span class="comment">// =&gt; vb2 is not defined</span></div></pre></td></tr></table></figure>
<p>(2).未声明直接赋值的变量拥有全局变量（与正确声明的全局变量不完全相同）<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">vb1=<span class="number">1</span>;<span class="comment">//注意这里没有使用 var 声明vb1</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> vb2=<span class="number">2</span>;</div><div class="line">    <span class="built_in">console</span>.log(vb1);   <span class="comment">// =&gt; 1</span></div><div class="line">    (<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(vb1);   <span class="comment">// =&gt; 1</span></div><div class="line">    &#125;)();</div><div class="line">&#125;</div><div class="line">fun1();</div><div class="line"><span class="built_in">console</span>.log(vb1);   <span class="comment">// =&gt; 1</span></div><div class="line"><span class="built_in">console</span>.log(vb2);   <span class="comment">// =&gt; vb2 is not defined</span></div></pre></td></tr></table></figure></p>
<p><strong>注意：</strong>未声明直接赋值的变量工作起来像（但并不完全相同）一个正确声明的全局变量。<br><br>给一个未声明的变量赋值的话，JavaScript会自动创建一个全局变量，以这种方式创建的变量是全局对象的正常的可配置值属性，并可以使用 <strong>delete</strong> 运算符删除。<br>但是如果是使用 var 声明的全局变量，则无法通过 <strong>delete</strong> 运算符删除。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> vb1=<span class="number">12</span>;</div><div class="line">vb2=<span class="number">13</span>;</div><div class="line"><span class="keyword">delete</span> vb1; <span class="comment">// =&gt; false</span></div><div class="line"><span class="keyword">delete</span> vb2; <span class="comment">// =&gt; true</span></div><div class="line"><span class="built_in">console</span>.log(vb1);   <span class="comment">// =&gt; 12</span></div><div class="line"><span class="built_in">console</span>.log(vb2);   <span class="comment">// =&gt; vb2 is not defined</span></div></pre></td></tr></table></figure></p>
<h3 id="2、局部作用域（Local-Scope）"><a href="#2、局部作用域（Local-Scope）" class="headerlink" title="2、局部作用域（Local Scope）"></a>2、局部作用域（Local Scope）</h3><p>局部作用域只能在某一作用域中访问到，例如函数内部<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> vb2=<span class="number">2</span>;</div><div class="line">    <span class="built_in">console</span>.log(vb2);   <span class="comment">// =&gt; 2</span></div><div class="line">&#125;</div><div class="line">fun1();</div><div class="line"><span class="built_in">console</span>.log(vb2);   <span class="comment">// =&gt; vb2 is not defined</span></div></pre></td></tr></table></figure></p>
<p><strong>注意：</strong>JavaScript与类似C语言这些编程语言不一样，JavaScript独立作用域只能通过函数代码类型创建，也就是说 <strong>if</strong>、<strong>for</strong> 这些语句并不能创建局部的上下文<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> vb1=<span class="number">0</span>;vb1&lt;<span class="number">10</span>;vb1++)&#123;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</div><div class="line">    <span class="keyword">var</span> vb2=<span class="number">2</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(vb1);   <span class="comment">// =&gt; 10</span></div><div class="line"><span class="built_in">console</span>.log(vb2);   <span class="comment">// =&gt; 2</span></div></pre></td></tr></table></figure></p>
<p>由上面代码可见，尽管 <strong>if</strong> 和 <strong>for</strong> 语句执行结束了，但vb1、vb2依然在当前作用域。有意思吧？？？这就是变量的<strong>声明提升</strong>，下面，我们开始讲声明的提升</p>
<h2 id="二、变量声明提升和函数提升"><a href="#二、变量声明提升和函数提升" class="headerlink" title="二、变量声明提升和函数提升"></a>二、变量声明提升和函数提升</h2><h3 id="1-变量声明提升-hoisting"><a href="#1-变量声明提升-hoisting" class="headerlink" title="1.变量声明提升(hoisting)"></a>1.变量声明提升(hoisting)</h3><p>我们先来看看下面的例子：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> vb1=<span class="number">1</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ho1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"log1:"</span>,vb1);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"log2:"</span>,vb2);</div><div class="line">    <span class="keyword">var</span> vb1=<span class="number">2</span>;</div><div class="line">    <span class="keyword">var</span> vb2=<span class="number">3</span>;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"log3:"</span>,vb1);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"log4:"</span>,vb2);</div><div class="line">&#125;</div><div class="line">ho1();</div></pre></td></tr></table></figure></p>
<p>大家猜想一下，上面的4个 console.log() 分别输出什么？第3、4个 console.log() 我们都知道输出分别是 <strong>log3: 2</strong> 和 <strong>log4: 3</strong>，但第1个和第2个 console.log() 输出的是什么呢？<br>可能有人认为第1个输出的是 <strong>log1: 1</strong>；第2个报错了，输出的是 <strong>vb2 is not defined</strong>，然后不能往下执行了。<br>其实不是这样的，第1个和第2个 console.log() 输出的都是 <strong><span style="color:red;">undefined</span></strong> 。由于JavaScript函数作用域的特性，局部变量在整个函数体内始终是有定义的，<br>在函数体内，局部变量（参数也是局部变量）替换同名的全局变量。在函数ho1体内，vb1和vb2始终是有定义的，也就是说，vb1和vb2的声明被提前了<br><span style="color:red;">（注意：是声明被提前了，而赋值没有被提前，赋值还是在原来的位置）</span>。<br><br><br>上面的代码等价于：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> vb1=<span class="number">1</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ho1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> vb1;</div><div class="line">    <span class="keyword">var</span> vb2;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"log1:"</span>,vb1);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"log2:"</span>,vb2);</div><div class="line">    vb1=<span class="number">2</span>;</div><div class="line">    vb2=<span class="number">3</span>;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"log3:"</span>,vb1);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"log4:"</span>,vb2);</div><div class="line">&#125;</div><div class="line">ho1();</div></pre></td></tr></table></figure></p>
<p>我们再来看看上面提到的 <strong>if</strong> 和 <strong>for</strong> ：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ho2</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="literal">true</span>)&#123;</div><div class="line">        <span class="keyword">var</span> vb1=<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(<span class="literal">false</span>)&#123;</div><div class="line">        <span class="keyword">var</span> vb2=<span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> vb3=<span class="number">0</span>;vb3&lt;<span class="number">10</span>;vb3++)&#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">ho2();</div></pre></td></tr></table></figure></p>
<p>无论定义的变量是否被执行，声明都被提升。上面代码等价于：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ho2</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> vb1;</div><div class="line">    <span class="keyword">var</span> vb2;</div><div class="line">    <span class="keyword">var</span> vb3;</div><div class="line">    <span class="keyword">if</span>(<span class="literal">true</span>)&#123;</div><div class="line">        vb1=<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(<span class="literal">false</span>)&#123;</div><div class="line">        vb2=<span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(vb3=<span class="number">0</span>;vb3&lt;<span class="number">10</span>;vb3++)&#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">ho2();</div></pre></td></tr></table></figure></p>
<h3 id="2-函数提升"><a href="#2-函数提升" class="headerlink" title="2.函数提升"></a>2.函数提升</h3><p>理解了变量声明提升，再来理解函数提升就容易多了。<br><br>变量只是声明被提升了，赋值并没有被提升。函数的声明有点不一样，函数体也会一同被提升。请注意，函数的声明有两种方式：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun2</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line"><span class="keyword">var</span> fun1=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</div></pre></td></tr></table></figure></p>
<p>下面我们看例子：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ho3</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    fun2();</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fun2</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"call fun2"</span>);  <span class="comment">// =&gt; call fun2 </span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ho4</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    fun1(); <span class="comment">// =&gt; fun is not a function</span></div><div class="line">    <span class="keyword">var</span> fun1=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"call fun1"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">ho3();</div><div class="line">ho4();</div></pre></td></tr></table></figure></p>
<p>等价于：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ho3</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fun2</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"call fun2"</span>);  <span class="comment">// =&gt; call fun2 </span></div><div class="line">    &#125;</div><div class="line">    fun2();</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ho4</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> fun1;</div><div class="line">    fun1(); <span class="comment">// =&gt; fun is not a function</span></div><div class="line">    fun1=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"call fun1"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">ho3();</div><div class="line">ho4();</div></pre></td></tr></table></figure></p>
<p>调用ho4()，执行到 fun1(); 报错了。<br><br>从这个例子里，我们可以看出，只有函数式的声明才会连同函数体一起被提升。fun1的声明会被提升，但是它指向的函数体只会在执行的时候才被赋值。<br><br></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、作用域&quot;&gt;&lt;a href=&quot;#一、作用域&quot; class=&quot;headerlink&quot; title=&quot;一、作用域&quot;&gt;&lt;/a&gt;一、作用域&lt;/h2&gt;&lt;p&gt;在JavaScript中，作用域有全局作用域和局部作用域两种。全局变量拥有全局作用域，在JavaScript代码中的
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.yanjiazhen.com/categories/javascript/"/>
    
    
      <category term="JS" scheme="http://www.yanjiazhen.com/tags/js/"/>
    
      <category term="JavaScript" scheme="http://www.yanjiazhen.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>原生JS点击li，获取li的索引（性能方面）</title>
    <link href="http://www.yanjiazhen.com/2015/08/javascript-li-click-event.html"/>
    <id>http://www.yanjiazhen.com/2015/08/javascript-li-click-event.html</id>
    <published>2015-08-15T13:22:56.000Z</published>
    <updated>2017-07-31T06:22:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>最近有为同学跟我说，他面试时，有一面试官问他这样一个问题：假如页面上有几千个li标签，怎样能做到我点击li，并获取到li的索引？<br>遇到这种问题，很多人的第一反应可能会说遍历所有li，给每个li添加点击事件；说真，这种方法也可以做到；但如果页面真的有几千个li，你还会这样做吗？很明显，面试官考的是性能方面的知识。<br>出于性能的考虑，我们都不应该给li添加点击事件，我们应该监听ul的点击事件。<br><br><br>下面我们来写写面试官问的问题。<br><br><br>html:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"list-box"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>item1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>item2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>item3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>item4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>item5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>item6<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>item7<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>item8<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>item9<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>item10<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>item11<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>item12<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>item13<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>item14<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>item15<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>item16<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>item17<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>item18<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    ……</div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>JS:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> listBox=<span class="built_in">document</span>.getElementById(<span class="string">'list-box'</span>);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">listClickFun</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> clickObj=event.target?event.target:event.srcElement;</div><div class="line">    <span class="keyword">var</span> parentObj=clickObj.parentNode?clickObj.parentNode:clickObj.parentElement;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;parentObj.children.length;i++)&#123;</div><div class="line">        <span class="keyword">if</span>(parentObj.children[i]==clickObj)&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="number">1</span>+i);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(listBox.addEventListener)&#123;</div><div class="line">    listBox.addEventListener(<span class="string">'click'</span>,listClickFun,<span class="literal">false</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span>(listBox.attachEvent)&#123;</div><div class="line">    listBox.attachEvent(<span class="string">'onclick'</span>,listClickFun);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>思路大致就是上面的方法。而实际应用中，我们很多时候都会在li里面写一些其他的标签，例如：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"list-box"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span>item1<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span>item2<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">div</span>&gt;</span>item3<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>item4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    ……</div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>如果上面的JS遇到这种情况，当我们点击前3个li时，问题来了，console.log输出的都是1。我们应该加一个判断，判断当前点击的元素是否是li。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> listBox=<span class="built_in">document</span>.getElementById(<span class="string">'list-box'</span>);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">listClickFun</span>(<span class="params">event</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> clickObj=event.target?event.target:event.srcElement;</div><div class="line">    <span class="keyword">while</span>(clickObj.tagName.toLowerCase()!=<span class="string">'li'</span>)&#123;<span class="comment">//判断当前点击的元素是否是li</span></div><div class="line">        <span class="comment">//如果点击的元素不是li，则获取点击元素的父元素</span></div><div class="line">        clickObj=clickObj.parentNode?clickObj.parentNode:clickObj.parentElement;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> parentObj=clickObj.parentNode?clickObj.parentNode:clickObj.parentElement;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;parentObj.children.length;i++)&#123;</div><div class="line">        <span class="keyword">if</span>(parentObj.children[i]==clickObj)&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="number">1</span>+i);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span>(listBox.addEventListener)&#123;</div><div class="line">    listBox.addEventListener(<span class="string">'click'</span>,listClickFun,<span class="literal">false</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> <span class="keyword">if</span>(listBox.attachEvent)&#123;</div><div class="line">    listBox.attachEvent(<span class="string">'onclick'</span>,listClickFun);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>源码：<a href="https://github.com/YJZhen/learning-and-testing/blob/master/Learning_1/index.html" target="_blank">https://github.com/YJZhen/learning-and-testing/blob/master/Learning_1/index.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h2&gt;&lt;p&gt;最近有为同学跟我说，他面试时，有一面试官问他这样一个问题：假如页面上有几千个li标签，怎样能做到我点击li，并获取到li的索
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.yanjiazhen.com/categories/javascript/"/>
    
    
      <category term="JS" scheme="http://www.yanjiazhen.com/tags/js/"/>
    
      <category term="JavaScript" scheme="http://www.yanjiazhen.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>zepto源码学习笔记 --- 方法</title>
    <link href="http://www.yanjiazhen.com/2015/08/zepto-function.html"/>
    <id>http://www.yanjiazhen.com/2015/08/zepto-function.html</id>
    <published>2015-08-02T15:03:11.000Z</published>
    <updated>2017-08-10T09:25:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天将zepto对外提供方法都看了一遍，对其中的一些方法做了笔记</p>
<h2 id="each-collection-function-index-item-…"><a href="#each-collection-function-index-item-…" class="headerlink" title="$.each(collection, function(index, item){ … })"></a>$.each(collection, function(index, item){ … })</h2><p>遍历对象/数组，在每个元素上执行回调，源码实现<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$.each = <span class="function"><span class="keyword">function</span>(<span class="params">elements, callback</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> i, key;</div><div class="line">	<span class="comment">//数组、类数组</span></div><div class="line">	<span class="keyword">if</span> (likeArray(elements)) &#123;        </div><div class="line">		<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; elements.length; i++)</div><div class="line">			<span class="keyword">if</span> (callback.call(elements[i], i, elements[i]) === <span class="literal">false</span>) <span class="keyword">return</span> elements</div><div class="line">	<span class="comment">//对象</span></div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">for</span> (key <span class="keyword">in</span> elements)       </div><div class="line">	    	<span class="keyword">if</span> (callback.call(elements[key], key, elements[key]) === <span class="literal">false</span>) <span class="keyword">return</span> elements</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> elements</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>使用for循环绑定事件时，会有一些问题需要注意<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> aLi = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'li'</span>);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = aLi.length; i &lt; len; i++) &#123;</div><div class="line">	aLi[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">		alert(i);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果以上面的方式绑定事件，则点击每个li元素，弹出的都是3，因为each使用了闭包，所以就可以这样绑定事件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> aLi = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'li'</span>);</div><div class="line">$.each(aLi, <span class="function"><span class="keyword">function</span> (<span class="params">index, element</span>) </span>&#123;</div><div class="line">	element.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">		alert(index);</div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>现在就能正确地弹出每个li元素的index值</p>
<h2 id="map-collection-function-item-index-…"><a href="#map-collection-function-item-index-…" class="headerlink" title="$.map(collection, function(item, index){ … })"></a>$.map(collection, function(item, index){ … })</h2><p>遍历对象/数组，在每个元素上执行回调，将回调函数返回值不为null或undefined的结果放入一个新的数组返回，源码实现<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> $ = &#123;&#125;;</div><div class="line"><span class="comment">// 类数组判断，只要对象的length属性是一个数字，就是类数组</span></div><div class="line"><span class="comment">// ps：zepto对象就是一个类数组</span></div><div class="line"><span class="comment">// 例如：&#123; 0: 'li', 1: 'li', length: 2, selector: 'li'&#125;</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">likeArray</span>(<span class="params">obj</span>) </span>&#123; </div><div class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> obj.length == <span class="string">'number'</span>; </div><div class="line">&#125;</div><div class="line"><span class="comment">// 利用空数组合并新数组，并返回合并数组</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">flatten</span>(<span class="params">array</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> array.length &gt; <span class="number">0</span> ? $.fn.concat.apply([], array) : array;</div><div class="line">&#125;</div><div class="line">$.fn = &#123;</div><div class="line">    concat: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> i, value, args = [];</div><div class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</div><div class="line">            value = <span class="built_in">arguments</span>[i];</div><div class="line">            args[i] = value;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> [].concat.apply(<span class="keyword">this</span>, args);    </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">$.map = <span class="function"><span class="keyword">function</span> (<span class="params">elements, callback</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> value, values = [], i, key;</div><div class="line">    <span class="keyword">if</span> (likeArray(elements)) &#123;</div><div class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; elements.length; i++) &#123;</div><div class="line">            value = callback(elements[i], i);</div><div class="line">            <span class="keyword">if</span> (value != <span class="literal">null</span>) &#123;</div><div class="line">                values.push(value);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">for</span> (key <span class="keyword">in</span> elements) &#123;</div><div class="line">            value = callback(elements[key], key);</div><div class="line">            <span class="keyword">if</span> (value != <span class="literal">null</span>) &#123;</div><div class="line">                values.push(value);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> flatten(values);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> arr = $.map([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="function"><span class="keyword">function</span> (<span class="params">item, index</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> item*<span class="number">2</span>;</div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [2, 4, 6]</span></div></pre></td></tr></table></figure></p>
<h2 id="add-selector-context"><a href="#add-selector-context" class="headerlink" title="add(selector, [context])"></a>add(selector, [context])</h2><p>将获取到的结果合并到当前集合中，例如<br>html:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>div1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>div2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>item1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>item2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'div'</span>);</div><div class="line"><span class="comment">// &#123;'&lt;div&gt;div1&lt;/div&gt;', '&lt;div&gt;div2&lt;/div&gt;'&#125;</span></div><div class="line">$(<span class="string">'div'</span>).add(<span class="string">'li'</span>);</div><div class="line"><span class="comment">// &#123;'&lt;div&gt;div1&lt;/div&gt;', '&lt;div&gt;div2&lt;/div&gt;', '&lt;li&gt;item1&lt;/li&gt;', '&lt;li&gt;item2&lt;/li&gt;'&#125;</span></div></pre></td></tr></table></figure>
<p>源码实现<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">add: <span class="function"><span class="keyword">function</span>(<span class="params">selector,context</span>)</span>&#123;</div><div class="line">    <span class="comment">//追加并去重</span></div><div class="line">  	<span class="keyword">return</span> $(uniq(<span class="keyword">this</span>.concat($(selector,context))));</div><div class="line">&#125;,</div></pre></td></tr></table></figure></p>
<p>##addClass<br>源码实现<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">addClass: <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!name) <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span> (<span class="params">idx</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> classList = [],</div><div class="line">        cls = className(<span class="keyword">this</span>), newName = funcArg(<span class="keyword">this</span>, name, idx, cls)</div><div class="line">        <span class="comment">//多个类，空格分隔为数组</span></div><div class="line">        newName.split(<span class="regexp">/\s+/g</span>).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">klass</span>)</span>&#123;</div><div class="line">          <span class="keyword">if</span> (!$(<span class="keyword">this</span>).hasClass(klass)) classList.push(klass)</div><div class="line">        &#125;, <span class="keyword">this</span>)</div><div class="line">        classList.length &amp;&amp; className(<span class="keyword">this</span>, cls + (cls ? <span class="string">" "</span> : <span class="string">""</span>) + classList.join(<span class="string">" "</span>))</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">className</span>(<span class="params">node, value</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> klass = node.className || <span class="string">''</span>,</div><div class="line">        svg   = klass &amp;&amp; klass.baseVal !== <span class="literal">undefined</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span> (value === <span class="literal">undefined</span>) <span class="keyword">return</span> svg ? klass.baseVal : klass</div><div class="line">    svg ? (klass.baseVal = value) : (node.className = value) <span class="comment">//class设值</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcArg</span>(<span class="params">context, arg, idx, payload</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> isFunction(arg) ? arg.call(context, idx, payload) : arg</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>用className方法取得当前元素的所有class，然后将新添加的class去重，并追加到元素的class上</p>
<p>##插入节点<br>这个方法非常强大，实现了8个功能<br>after（insertAfter）<br>prepend（prependTo）<br>before（insertBefore）<br>append（appendTo）<br>源码实现<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">adjacencyOperators = [<span class="string">'after'</span>, <span class="string">'prepend'</span>, <span class="string">'before'</span>, <span class="string">'append'</span>]</div><div class="line">adjacencyOperators.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">operator, operatorIndex</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> inside = operatorIndex % <span class="number">2</span> <span class="comment">//=&gt; prepend, append</span></div><div class="line">    $.fn[operator] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">// arguments can be nodes, arrays of nodes, Zepto objects and HTML strings</span></div><div class="line">        <span class="keyword">var</span> argType, nodes = $.map(<span class="built_in">arguments</span>, <span class="function"><span class="keyword">function</span> (<span class="params">arg</span>) </span>&#123;</div><div class="line">            argType = type(arg)</div><div class="line">            <span class="keyword">return</span> argType == <span class="string">"object"</span> || argType == <span class="string">"array"</span> || arg == <span class="literal">null</span> ? arg : zepto.fragment(arg)</div><div class="line">        &#125;),</div><div class="line">        parent, copyByClone = <span class="keyword">this</span>.length &gt; <span class="number">1</span> <span class="comment">//如果集合的长度大于1，则需要clone被插入的节点</span></div><div class="line">        <span class="keyword">if</span> (nodes.length &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">this</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span> (<span class="params">_, target</span>) </span>&#123;</div><div class="line">            parent = inside ? target : target.parentNode</div><div class="line">			<span class="comment">// 用insertBefore模拟实现</span></div><div class="line">            target = operatorIndex == <span class="number">0</span> ? target.nextSibling :  <span class="comment">//after，target等于下一个兄弟元素，然后将DOM通过insertBefore插入到target前</span></div><div class="line">            		 operatorIndex == <span class="number">1</span> ? target.firstChild :  <span class="comment">//prepend target为parent的第一个元素，然后将DOM通过insertBefore插入到target前</span></div><div class="line">            		 operatorIndex == <span class="number">2</span> ? target :            <span class="comment">// before  直接将将DOM通过insertBefore插入到target前</span></div><div class="line">            		 <span class="literal">null</span>                                  <span class="comment">// append  parent.insertBefore(node, null)</span></div><div class="line">            nodes.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">node</span>) </span>&#123;</div><div class="line">                <span class="keyword">if</span> (copyByClone) node = node.cloneNode(<span class="literal">true</span>)</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (!parent) <span class="keyword">return</span> $(node).remove()</div><div class="line">                <span class="comment">// 插入节点后，如果被插入的节点是SCRIPT，则执行里面的内容并将window设为上下文</span></div><div class="line">                traverseNode(parent.insertBefore(node, target), <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</div><div class="line">                    <span class="keyword">if</span> (el.nodeName != <span class="literal">null</span> &amp;&amp; el.nodeName.toUpperCase() === <span class="string">'SCRIPT'</span> &amp;&amp; </div><div class="line">                       (!el.type || el.type === <span class="string">'text/javascript'</span>) &amp;&amp; !el.src) </div><div class="line">                    	<span class="built_in">window</span>[<span class="string">'eval'</span>].call(<span class="built_in">window</span>, el.innerHTML)</div><div class="line">                &#125;)</div><div class="line">            &#125;)</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// after =&gt; insertAfter</span></div><div class="line">    <span class="comment">// prepend =&gt; prependTo</span></div><div class="line">    <span class="comment">// before =&gt; insertBefore</span></div><div class="line">    <span class="comment">// append =&gt; appendTo</span></div><div class="line">    $.fn[inside ? operator + <span class="string">'To'</span> : <span class="string">'insert'</span> + (operatorIndex ? <span class="string">'Before'</span> : <span class="string">'After'</span>)] = <span class="function"><span class="keyword">function</span> (<span class="params">html</span>) </span>&#123;</div><div class="line">        $(html)[operator](<span class="keyword">this</span>)</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span></div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>inside只会取到0,1两个值<br>然后在$.fn上定义4个方法，例如使用append方法，$(‘body’).append(dom);<br>假如传入的是html字符串，则调用zepto.fragment来生成dom<br>这里的this就是前面的dom集合，因为集合里面可能有多个节点，只不过平时一般就是给一个节点插入东西<br>需要注意的是这里使用了克隆节点，因为就像上面所说的，一个节点可能插入到不同的节点中，所以需要克隆，否则就是一个节点在移动位置而已<br>因为原生javascript只支持appendChild与insertBefore这里使用insertBefore,在使用insertBefore时，如果要将节点插入到最后一个（也就是append方法），写法为parent.insertBefore(node, null)<br>这里有一个遍历节点的方法traverseNode<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">traverseNode</span>(<span class="params">node, fun</span>) </span>&#123;</div><div class="line">	fun(node)</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = node.childNodes.length; i &lt; len; i++)</div><div class="line">		traverseNode(node.childNodes[i], fun)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>最后将方法包装了一下，例如把after转化成insertAfter</p>
<p>##attr<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">attr: <span class="function"><span class="keyword">function</span>(<span class="params">name, value</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> result</div><div class="line">    <span class="comment">//仅有name，且为字符串时，表示读</span></div><div class="line">    <span class="keyword">return</span> (<span class="keyword">typeof</span> name == <span class="string">'string'</span> &amp;&amp; !(<span class="number">1</span> <span class="keyword">in</span> <span class="built_in">arguments</span>)) ?</div><div class="line">        <span class="comment">//$是空的 或里面的元素非元素，返回undefined</span></div><div class="line">        (!<span class="keyword">this</span>.length || <span class="keyword">this</span>[<span class="number">0</span>].nodeType !== <span class="number">1</span> ? <span class="literal">undefined</span> :</div><div class="line">        <span class="comment">//直接用getAttribute(name)读，</span></div><div class="line">        (!(result = <span class="keyword">this</span>[<span class="number">0</span>].getAttribute(name)) &amp;&amp; name <span class="keyword">in</span> <span class="keyword">this</span>[<span class="number">0</span>]) ? <span class="keyword">this</span>[<span class="number">0</span>][name] : result</div><div class="line">        ) :  <span class="comment">//否则是写，不管name为对象&#123;k:v&#125;,或name value 都存在</span></div><div class="line">        <span class="keyword">this</span>.each(<span class="function"><span class="keyword">function</span>(<span class="params">idx</span>)</span>&#123;、</div><div class="line">       		<span class="comment">//非元素</span></div><div class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.nodeType !== <span class="number">1</span>) <span class="keyword">return</span>   </div><div class="line">            <span class="comment">//如果name为对象，批量设置属性</span></div><div class="line">            <span class="keyword">if</span> (isObject(name)) <span class="keyword">for</span> (key <span class="keyword">in</span> name) setAttribute(<span class="keyword">this</span>, key, name[key])</div><div class="line">            <span class="comment">//处理value为函数/null/undefined的情况</span></div><div class="line">            <span class="keyword">else</span> setAttribute(<span class="keyword">this</span>, name, funcArg(<span class="keyword">this</span>, value, idx, <span class="keyword">this</span>.getAttribute(name)))</div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>只传一个参数，读属性，传两个属性，则为写<br>需要注意的是，只会读取第一个dom的属性值this[0].getAttribute(name)</p>
<p>##deserializeValue<br>序列化值，把自定义数据读出来时做应该的转换，$.data()方法使用<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">deserializeValue</span>(<span class="params">value</span>) </span>&#123;</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">	  	<span class="keyword">return</span> value ?</div><div class="line">	    value == <span class="string">"true"</span> ||</div><div class="line">	    ( value == <span class="string">"false"</span> ? <span class="literal">false</span> :</div><div class="line">	      value == <span class="string">"null"</span> ? <span class="literal">null</span> :</div><div class="line">	      +value + <span class="string">""</span> == value ? +value :</div><div class="line">	      /^[\[\&#123;]/.test(value) ? $.parseJSON(value) :</div><div class="line">	      value )</div><div class="line">	    : value</div><div class="line">	&#125; <span class="keyword">catch</span>(e) &#123;</div><div class="line">	  	<span class="keyword">return</span> value</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// "true"  =&gt; true</span></div><div class="line"><span class="comment">// "false" =&gt; false</span></div><div class="line"><span class="comment">// "null"  =&gt; null</span></div><div class="line"><span class="comment">// "42"    =&gt; 42</span></div><div class="line"><span class="comment">// "42.5"  =&gt; 42.5</span></div><div class="line"><span class="comment">// "08"    =&gt; "08"</span></div><div class="line"><span class="comment">// JSON    =&gt; parse if valid</span></div><div class="line"><span class="comment">// String  =&gt; self</span></div></pre></td></tr></table></figure></p>
<p>##data<br>设置自定义数据<br>注意与jQuery的区别，jQuery可以读写任何数据类型。这里原理是H5的data-，或直接setAttribute/getAttribute，只能读写字符串<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">data: <span class="function"><span class="keyword">function</span>(<span class="params">name, value</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> attrName = <span class="string">'data-'</span> + name.replace(capitalRE, <span class="string">'-$1'</span>).toLowerCase()</div><div class="line">	<span class="keyword">var</span> data = (<span class="number">1</span> <span class="keyword">in</span> <span class="built_in">arguments</span>) ?</div><div class="line">		<span class="keyword">this</span>.attr(attrName, value) :</div><div class="line">		<span class="keyword">this</span>.attr(attrName)</div><div class="line">	<span class="keyword">return</span> data !== <span class="literal">null</span> ? deserializeValue(data) : <span class="literal">undefined</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天将zepto对外提供方法都看了一遍，对其中的一些方法做了笔记&lt;/p&gt;
&lt;h2 id=&quot;each-collection-function-index-item-…&quot;&gt;&lt;a href=&quot;#each-collection-function-index-item-…&quot; clas
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.yanjiazhen.com/categories/javascript/"/>
    
    
      <category term="zepto" scheme="http://www.yanjiazhen.com/tags/zepto/"/>
    
  </entry>
  
  <entry>
    <title>zepto源码学习笔记 --- $()方法</title>
    <link href="http://www.yanjiazhen.com/2015/08/zepto-init.html"/>
    <id>http://www.yanjiazhen.com/2015/08/zepto-init.html</id>
    <published>2015-08-01T14:18:17.000Z</published>
    <updated>2017-08-10T09:25:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>$()方法根据传入参数的selector来执行选择器、创建dom、执行ready等操作</p>
<p>##常用操作<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 选择器</span></div><div class="line">$(<span class="string">'div'</span>);</div><div class="line"><span class="comment">// 创建元素</span></div><div class="line">$(<span class="string">'&lt;div&gt;&lt;/div&gt;'</span>);</div><div class="line"><span class="comment">// 创建元素，添加属性</span></div><div class="line">$(<span class="string">'&lt;p&gt;&lt;/p&gt;'</span>, &#123;</div><div class="line">	text: <span class="string">'hello'</span>,</div><div class="line">	id: <span class="string">'greeting'</span>,</div><div class="line">	css: &#123; color: #0af &#125;</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 当页面载入完毕时执行</span></div><div class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="comment">// code</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>##源码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">zepto.init = <span class="function"><span class="keyword">function</span>(<span class="params">selector, context</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> dom</div><div class="line">	<span class="comment">// If nothing given, return an empty Zepto collection</span></div><div class="line">	<span class="comment">// 未传参，undefined进行boolean转换，返回空Zepto对象</span></div><div class="line">	<span class="keyword">if</span> (!selector) <span class="keyword">return</span> zepto.Z()</div><div class="line">	<span class="comment">// Optimize for string selectors</span></div><div class="line">	<span class="comment">//selector是字符串，即css表达式</span></div><div class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> selector == <span class="string">'string'</span>) &#123;</div><div class="line">		<span class="comment">//去前后空格</span></div><div class="line">		selector = selector.trim()</div><div class="line">		<span class="comment">//如果是&lt;开头 &gt;结尾的基本的HTML代码时</span></div><div class="line">		<span class="keyword">if</span> (selector[<span class="number">0</span>] == <span class="string">'&lt;'</span> &amp;&amp; fragmentRE.test(selector)) </div><div class="line">			<span class="comment">//调用片段生成dom</span></div><div class="line">			dom = zepto.fragment(selector, <span class="built_in">RegExp</span>.$<span class="number">1</span>, context), selector = <span class="literal">null</span></div><div class="line">		<span class="comment">//如果传递了上下文，在上下文中查找元素</span></div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (context !== <span class="literal">undefined</span>)  <span class="keyword">return</span> $(context).find(selector)</div><div class="line">		<span class="comment">// If it's a CSS selector, use it to select nodes.</span></div><div class="line">		<span class="comment">//通过css表达式查找元素</span></div><div class="line">		<span class="keyword">else</span> dom = zepto.qsa(<span class="built_in">document</span>, selector)</div><div class="line">	&#125;</div><div class="line">	<span class="comment">// If a function is given, call it when the DOM is ready</span></div><div class="line">	<span class="comment">//如果selector是函数，则在DOM ready的时候执行它</span></div><div class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (isFunction(selector)) <span class="keyword">return</span> $(<span class="built_in">document</span>).ready(selector)</div><div class="line">	<span class="comment">// If a Zepto collection is given, just return it</span></div><div class="line">	<span class="comment">//如果selector是一个Zepto对象，返回它自己</span></div><div class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (zepto.isZ(selector)) <span class="keyword">return</span> selector</div><div class="line">	<span class="keyword">else</span> &#123;</div><div class="line">		<span class="comment">// normalize array if an array of nodes is given</span></div><div class="line">		<span class="comment">//如果selector是数组，过滤null,undefined</span></div><div class="line">		<span class="keyword">if</span> (isArray(selector)) dom = compact(selector)</div><div class="line">		<span class="comment">//如果selector是对象,注意DOM节点的typeof值也是object，所以在里面还要再进行一次判断</span></div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (isObject(selector))</div><div class="line">			dom = [selector], selector = <span class="literal">null</span></div><div class="line">		<span class="comment">// If it's a html fragment, create nodes from it</span></div><div class="line">		<span class="comment">//如果selector是复杂的HTML代码，调用片段换成DOM节点</span></div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (fragmentRE.test(selector))</div><div class="line">			dom = zepto.fragment(selector.trim(), <span class="built_in">RegExp</span>.$<span class="number">1</span>, context), selector = <span class="literal">null</span></div><div class="line">		<span class="comment">// If there's a context, create a collection on that context first, and select</span></div><div class="line">		<span class="comment">// nodes from there</span></div><div class="line">		<span class="comment">//如果存在上下文context，仍在上下文中查找selector</span></div><div class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (context !== <span class="literal">undefined</span>) <span class="keyword">return</span> $(context).find(selector)</div><div class="line">		<span class="comment">// And last but no least, if it's a CSS selector, use it to select nodes.</span></div><div class="line">		<span class="comment">//如果没有给定上下文，在document中查找selector</span></div><div class="line">		<span class="keyword">else</span> dom = zepto.qsa(<span class="built_in">document</span>, selector)</div><div class="line">	&#125;</div><div class="line">	<span class="comment">// create a new Zepto collection from the nodes found</span></div><div class="line">	<span class="comment">//将查询结果转换成Zepto对象</span></div><div class="line">	<span class="keyword">return</span> zepto.Z(dom, selector)</div><div class="line">&#125;</div><div class="line"></div><div class="line">$ = <span class="function"><span class="keyword">function</span>(<span class="params">selector, context</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> zepto.init(selector, context)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>1、如果selector不存在，执行zepto.Z()，则返回空的zepto对象<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Z</span>(<span class="params">dom, selector</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> i, len = dom ? dom.length : <span class="number">0</span></div><div class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) <span class="keyword">this</span>[i] = dom[i]</div><div class="line">	<span class="keyword">this</span>.length = len</div><div class="line">	<span class="keyword">this</span>.selector = selector || <span class="string">''</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">zepto.Z = <span class="function"><span class="keyword">function</span>(<span class="params">dom, selector</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">new</span> Z(dom, selector)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2、传入html字符串<br><br>这里用的一个HTML代码判断的正则<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fragmentRE = <span class="regexp">/^\s*&lt;(\w+|!)[^&gt;]*&gt;/</span>;</div><div class="line"></div><div class="line">fragmentRE.test(<span class="string">'&lt;div&gt;'</span>); <span class="comment">// true</span></div><div class="line">fragmentRE.test(<span class="string">'&lt;div&gt;&lt;/div&gt;'</span>); <span class="comment">// true</span></div><div class="line">fragmentRE.test(<span class="string">'&lt;img /&gt;'</span>); <span class="comment">// true</span></div></pre></td></tr></table></figure></p>
<p>这里还有一个关于正则的知识点<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//RegExp.$1是RegExp的一个属性,指的是与正则表达式匹配的第一个子匹配(以括号为标志)字符串，</span></div><div class="line"><span class="comment">//以此类推，RegExp.$2，RegExp.$3，..RegExp.$99总共可以有99个匹配</span></div><div class="line"><span class="keyword">var</span> reg1 = <span class="regexp">/^(a)(b)c(d)$/</span>;</div><div class="line"><span class="keyword">var</span> reg2 = <span class="regexp">/^ab(c)d$/</span>;</div><div class="line">reg1.test(<span class="string">'abcd'</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">1</span>); <span class="comment">// a</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">2</span>); <span class="comment">// b</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">3</span>); <span class="comment">// c</span></div><div class="line">reg2.test(<span class="string">'abcd'</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">1</span>); <span class="comment">// c</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">2</span>); <span class="comment">// </span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">RegExp</span>.$<span class="number">3</span>); <span class="comment">//</span></div></pre></td></tr></table></figure></p>
<p>调用zepto.fragment方法来生成dom<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">zepto.fragment = <span class="function"><span class="keyword">function</span>(<span class="params">html, name, properties</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> dom, nodes, container</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (singleTagRE.test(html)) dom = $(<span class="built_in">document</span>.createElement(<span class="built_in">RegExp</span>.$<span class="number">1</span>))</div><div class="line"></div><div class="line">	<span class="keyword">if</span> (!dom) &#123;</div><div class="line">		<span class="comment">//修正自闭合标签 如&lt;div /&gt;，转换成&lt;div&gt;&lt;/div&gt;</span></div><div class="line">		<span class="keyword">if</span> (html.replace) html = html.replace(tagExpanderRE, <span class="string">"&lt;$1&gt;&lt;/$2&gt;"</span>)</div><div class="line">		<span class="comment">//给name取元素名</span></div><div class="line">		<span class="keyword">if</span> (name === <span class="literal">undefined</span>) name = fragmentRE.test(html) &amp;&amp; <span class="built_in">RegExp</span>.$<span class="number">1</span></div><div class="line">		<span class="comment">//设置容器名，如果不是tr,tbody,thead,tfoot,td,th，则容器名为div</span></div><div class="line">		<span class="comment">//为什么设置容器，是严格按照HTML语法，虽然tr td th浏览器会会自动添加tbody</span></div><div class="line">		<span class="keyword">if</span> (!(name <span class="keyword">in</span> containers)) name = <span class="string">'*'</span></div><div class="line"></div><div class="line">			container = containers[name]    <span class="comment">//创建容器</span></div><div class="line">			container.innerHTML = <span class="string">''</span> + html       <span class="comment">//生成DOM</span></div><div class="line">			<span class="comment">//取容器的子节点</span></div><div class="line">			dom = $.each(slice.call(container.childNodes), <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			container.removeChild(<span class="keyword">this</span>)   <span class="comment">//把创建的子节点逐个删除</span></div><div class="line">		&#125;)</div><div class="line">	&#125;</div><div class="line">	<span class="comment">//如果properties是对象，遍历它，将它设置成DOM的属性</span></div><div class="line">	<span class="keyword">if</span> (isPlainObject(properties)) &#123;</div><div class="line">	    <span class="comment">//转换成Zepto Obj,方便调用Zepto的方法</span></div><div class="line">		nodes = $(dom)</div><div class="line">		<span class="comment">//遍历对象，设置属性</span></div><div class="line">		$.each(properties, <span class="function"><span class="keyword">function</span>(<span class="params">key, value</span>) </span>&#123;</div><div class="line">		  <span class="comment">//优先获取属性修正对象，通过修正对象读写值</span></div><div class="line">		  <span class="comment">// methodAttributes包含'val', 'css', 'html', 'text', 'data', 'width', 'height', 'offset'，</span></div><div class="line">			<span class="keyword">if</span> (methodAttributes.indexOf(key) &gt; <span class="number">-1</span>) nodes[key](value)</div><div class="line">			<span class="keyword">else</span> nodes.attr(key, value)</div><div class="line">		&#125;)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">//返回dom数组  如[div,div]</span></div><div class="line">	<span class="keyword">return</span> dom</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其实就是创建一个元素来作为容器，然后利用innerHTML将html字符串转化成dom，然后将子节点赋值给dom保存下来，最后清除container中的节点，这个方法有点复杂，单独写了一个demo来测试<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> table = <span class="built_in">document</span>.createElement(<span class="string">'table'</span>),</div><div class="line">    tableRow = <span class="built_in">document</span>.createElement(<span class="string">'tr'</span>),</div><div class="line">	containers = &#123;</div><div class="line">	<span class="string">'tr'</span>: <span class="built_in">document</span>.createElement(<span class="string">'tbody'</span>),</div><div class="line">	<span class="string">'tbody'</span>: table, </div><div class="line">	<span class="string">'thead'</span>: table, </div><div class="line">	<span class="string">'tfoot'</span>: table,</div><div class="line">	<span class="string">'td'</span>: tableRow, </div><div class="line">	<span class="string">'th'</span>: tableRow,</div><div class="line">	<span class="string">'*'</span>: <span class="built_in">document</span>.createElement(<span class="string">'div'</span>)</div><div class="line">	&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">likeArray</span>(<span class="params">obj</span>) </span>&#123; </div><div class="line">	<span class="keyword">return</span> <span class="keyword">typeof</span> obj.length == <span class="string">'number'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> $ = &#123;&#125;;</div><div class="line"><span class="keyword">var</span> slice = [].slice;</div><div class="line"><span class="comment">// slice()方法可截取字符串的某个部分，返回被截取部分</span></div><div class="line"><span class="comment">// var str = 'hello world';</span></div><div class="line"><span class="comment">// document.write(str.slice(6)); // world</span></div><div class="line"></div><div class="line">$.each = <span class="function"><span class="keyword">function</span> (<span class="params">elements, callback</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> i, key;</div><div class="line">	<span class="keyword">if</span> (likeArray(elements)) &#123;</div><div class="line">		<span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; elements.length; i++) &#123;</div><div class="line">			<span class="keyword">if</span> (callback.call(elements[i], i, elements[i]) === <span class="literal">false</span>) &#123;</div><div class="line">				<span class="keyword">return</span> elements;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">for</span> (key <span class="keyword">in</span> elements) &#123;</div><div class="line">			<span class="keyword">if</span> (callback.call(elements[key], key, elements[key]) === <span class="literal">false</span>) &#123;</div><div class="line">				<span class="keyword">return</span> elements;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="built_in">console</span>.log(elements);</div><div class="line">	<span class="keyword">return</span> elements;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> name = <span class="string">'*'</span>, html = <span class="string">'&lt;p&gt;&lt;/p&gt;&lt;span&gt;&lt;/span&gt;'</span>;</div><div class="line">container = containers[name];</div><div class="line">container.innerHTML = <span class="string">''</span> + html;      </div><div class="line"></div><div class="line"><span class="keyword">var</span> dom = $.each(slice.call(container.childNodes), <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	 container.removeChild(<span class="keyword">this</span>);  </div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>dom的结果为<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">	<span class="number">0</span>: p,</div><div class="line">	<span class="number">1</span>: span,</div><div class="line">	length: <span class="number">2</span></div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>3、选择器查询<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">zepto.qsa = <span class="function"><span class="keyword">function</span>(<span class="params">element, selector</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> found,</div><div class="line">        maybeID = selector[<span class="number">0</span>] == <span class="string">'#'</span>,<span class="comment">//ID标识</span></div><div class="line">        maybeClass = !maybeID &amp;&amp; selector[<span class="number">0</span>] == <span class="string">'.'</span>,<span class="comment">//class 标识</span></div><div class="line">        <span class="comment">//是id/class,就取'#/.'后的字符串，如‘#test’取‘test'</span></div><div class="line">        nameOnly = maybeID || maybeClass ? selector.slice(<span class="number">1</span>) : selector,</div><div class="line">        isSimple = simpleSelectorRE.test(nameOnly)  <span class="comment">//<span class="doctag">TODO:</span>是否为单个选择器  没有空格</span></div><div class="line">    <span class="keyword">return</span> (element.getElementById &amp;&amp; isSimple &amp;&amp; maybeID) ? </div><div class="line">        <span class="comment">//通过getElementById查找DOM，找到返回[dom],找不到返回[]</span></div><div class="line">      	( (found = element.getElementById(nameOnly)) ? [found] : [] ) :</div><div class="line">        <span class="comment">//当element不为元素节点或document fragment时，返回空</span></div><div class="line">        <span class="comment">//元素element(1)  属性attr(2) 文本text(3) 注释comments(8) 文档document(9) 片段fragment(11)</span></div><div class="line">      	(element.nodeType !== <span class="number">1</span> &amp;&amp; element.nodeType !== <span class="number">9</span> &amp;&amp; element.nodeType !== <span class="number">11</span>) ? [] : slice.call(</div><div class="line">        <span class="comment">//如果是class，通过getElementsByClassName查找DOM，</span></div><div class="line">        isSimple &amp;&amp; !maybeID &amp;&amp; element.getElementsByClassName ? <span class="comment">// DocumentFragment doesn't have getElementsByClassName/TagName</span></div><div class="line">        maybeClass ? element.getElementsByClassName(nameOnly) : <span class="comment">// If it's simple, it could be a class</span></div><div class="line">        element.getElementsByTagName(selector) : <span class="comment">// Or a tag //如果是标签名,调用getElementsByTagName</span></div><div class="line">        <span class="comment">//最后调用querySelectorAll</span></div><div class="line">        element.querySelectorAll(selector) <span class="comment">// Or it's not simple, and we need to query all</span></div><div class="line">    )</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>因为zepto只考虑高级浏览器，所以直接使用getElementsByClassName，querySelectorAll选择元素，非常方便</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;$()方法根据传入参数的selector来执行选择器、创建dom、执行ready等操作&lt;/p&gt;
&lt;p&gt;##常用操作&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.yanjiazhen.com/categories/javascript/"/>
    
    
      <category term="JS" scheme="http://www.yanjiazhen.com/tags/js/"/>
    
      <category term="JavaScript" scheme="http://www.yanjiazhen.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>zepto源码学习笔记 --- 核心结构</title>
    <link href="http://www.yanjiazhen.com/2015/08/learn-zepto-source-init.html"/>
    <id>http://www.yanjiazhen.com/2015/08/learn-zepto-source-init.html</id>
    <published>2015-08-01T12:57:21.000Z</published>
    <updated>2017-08-10T09:25:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>Zepto是面向高级浏览器的js框架，API与jQuery基本一致，体积小，非常适合在移动端使用</p>
<p>##结构<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Zepto = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 定义内部变量和工具方法</span></div><div class="line">    <span class="keyword">var</span> <span class="literal">undefined</span>, key, $, classList, emptyArray = [], concat = emptyArray.concat,</div><div class="line">        ...</div><div class="line">        zepto = &#123;&#125;</div><div class="line"></div><div class="line">	<span class="comment">// zepto对象构造函数</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Z</span>(<span class="params">dom, selector</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> i, len = dom ? dom.length : <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) <span class="keyword">this</span>[i] = dom[i]</div><div class="line">        <span class="keyword">this</span>.length = len</div><div class="line">        <span class="keyword">this</span>.selector = selector || <span class="string">''</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">	<span class="comment">// 将dom包装成zepto对象</span></div><div class="line">    zepto.Z = <span class="function"><span class="keyword">function</span>(<span class="params">dom, selector</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Z(dom, selector);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">	<span class="comment">// 根据selector来执行选择器、创建dom、执行ready等操作</span></div><div class="line">    zepto.init = <span class="function"><span class="keyword">function</span>(<span class="params">selector, context</span>) </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">	<span class="comment">// 入口函数</span></div><div class="line">    $ = <span class="function"><span class="keyword">function</span>(<span class="params">selector, context</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> zepto.init(selector, context)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">	<span class="comment">// 实例方法</span></div><div class="line">    $.fn = &#123;</div><div class="line">        concat: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</div><div class="line">        map: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</div><div class="line">        slice: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</div><div class="line">        ready: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</div><div class="line">        get: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line"></div><div class="line"> 	<span class="comment">// 原型执行</span></div><div class="line">    zepto.Z.prototype = Z.prototype = $.fn;</div><div class="line"></div><div class="line">	<span class="comment">// 将内部定义的zepto对象挂载到$下面</span></div><div class="line">    $.zepto = zepto;</div><div class="line"></div><div class="line">&#125;)();</div><div class="line"><span class="built_in">window</span>.Zepto = Zepto</div><div class="line"><span class="built_in">window</span>.$ === <span class="literal">undefined</span> &amp;&amp; (<span class="built_in">window</span>.$ = Zepto)</div></pre></td></tr></table></figure></p>
<p>##入口$()方法<br>当执行$()时，会调用zepto.init()，zepto.init可能执行ready方法，也可能调用zepto.Z()函数返回Z函数的一个实例（称为zepto对象），例如,html结构为<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>item1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>item2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">li</span>&gt;</span>item3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>执行$(‘li’)，返回的结果<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">	<span class="number">0</span>: li,</div><div class="line">	<span class="number">1</span>: li,</div><div class="line">	<span class="number">2</span>: li,</div><div class="line">	length: <span class="number">3</span>,</div><div class="line">	selector: <span class="string">'li'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>##$.fn<br>zepto对象如何使用$.fn对象里的方法呢？答案就是通过这一行代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">zepto.Z.prototype = Z.prototype = $.fn;</div></pre></td></tr></table></figure></p>
<p>构造函数Z的原型和$.fn执行同一个内存地址，这样一来构造函数Z的实例（也就是zepto对象）就可以访问$.fn里面定义的方法，所以，把这些方法称为zepto的实例方法</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Zepto是面向高级浏览器的js框架，API与jQuery基本一致，体积小，非常适合在移动端使用&lt;/p&gt;
&lt;p&gt;##结构&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div clas
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.yanjiazhen.com/categories/javascript/"/>
    
    
      <category term="zepto" scheme="http://www.yanjiazhen.com/tags/zepto/"/>
    
  </entry>
  
  <entry>
    <title>解决Apache下403 Forbidden错误</title>
    <link href="http://www.yanjiazhen.com/2015/04/PHP-APACHE-403.html"/>
    <id>http://www.yanjiazhen.com/2015/04/PHP-APACHE-403.html</id>
    <published>2015-04-15T16:00:00.000Z</published>
    <updated>2017-07-31T06:19:35.000Z</updated>
    
    <content type="html"><![CDATA[<p></p><p>HTTP 错误 403 - 禁止访问，即403 Forbidden：You don’t have permission to access / on this server.</p><p></p>
<p></p><p>可能是权限不足引起的问题。</p><p></p>
<p></p><p>解决方法：</p><p></p>
<p></p><p>打开apache的配置文件httpd.conf，逐行检查。</p><p></p>
<p></p><p>找到：&lt;Directory /&gt;</p><p></p>
<p></p><p>把&lt;Directory /&gt;的配置参数修改成如下：</p><p></p>
<div>说明：&lt;Directory “站点的路径”&gt;</div><br><img src="/images/php/apache-403-1.png"><br><br><br><br><br><br><h5>再httpd.conf下开启虚拟主机功能</h5><br><div>找到配置项</div><br><div># Virtual hosts</div><br><div>#Include /Applications/XAMPP/etc/extra/httpd-vhosts.conf</div><br><div>修改为</div><br><div># Virtual hosts</div><br><div>Include /Applications/XAMPP/etc/extra/httpd-vhosts.conf</div><br><hr><br>httpd-vhosts.conf配置文件的内容如下：<br><div style="color:red">#</div><br><div style="color:red"># DocumentRoot 是网站文件存放的根目录</div><br><div style="color:red"># ServerName 是网站域名, 需要跟 DNS 指向的域名一致</div><br><div style="color:red">#</div>

<p></p><h5>在httpd-vhosts.conf配置文件中添加站点：</h5><br><img src="/images/php/apache-403-2.png"><p></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p&gt;HTTP 错误 403 - 禁止访问，即403 Forbidden：You don’t have permission to access / on this server.&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;p&gt;可能是权限不足引起的问题。&lt;/p&gt;&lt;p&gt;&lt;
    
    </summary>
    
      <category term="php和mysql" scheme="http://www.yanjiazhen.com/categories/php%E5%92%8Cmysql/"/>
    
    
      <category term="apache" scheme="http://www.yanjiazhen.com/tags/apache/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript原型继承</title>
    <link href="http://www.yanjiazhen.com/2015/04/javascript-prototype.html"/>
    <id>http://www.yanjiazhen.com/2015/04/javascript-prototype.html</id>
    <published>2015-04-05T13:39:19.000Z</published>
    <updated>2017-07-31T06:29:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、JS原型的关系图"><a href="#一、JS原型的关系图" class="headerlink" title="一、JS原型的关系图"></a>一、JS原型的关系图</h2><p><img class="img" src="/media/images/prototype.jpg" alt="JS原型的关系图"></p>
<h2 id="二、重要的知识点"><a href="#二、重要的知识点" class="headerlink" title="二、重要的知识点"></a>二、重要的知识点</h2><p><ul><br>    <li></li></ul></p>
<p></p><p>除了IE浏览器，其他浏览器都在Object对象的实例上，部署了一个非标准的<strong>proto</strong>属性（前后各两个下划线），指向该对象的原型对象，即构造函数的prototype属性。</p><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> o1 = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line"></div><div class="line">o1.__proto__ === <span class="built_in">Object</span>.prototype</div><div class="line"><span class="comment">// true</span></div><div class="line"></div><div class="line">o1.__proto__ === o1.constructor.prototype</div><div class="line"><span class="comment">// true</span></div></pre></td></tr></table></figure><p></p>
<pre><code>&lt;/li&gt;
&lt;li&gt;
</code></pre><p></p><p>构造函数拥有一个prototype属性指向它们的原型对象，同时，它们的原型对象有constructor属性指向这个构造函数</p><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span>.prototype.constructor === <span class="built_in">Object</span>; <span class="comment">// ture</span></div></pre></td></tr></table></figure><p></p>
<pre><code>&lt;/li&gt;
&lt;li&gt;&lt;p&gt;所有实例可以访问其构造函数的原型对象，但是其构造函数本身不能访问，不过，因为构造函数本身是一个函数，所有函数都是构造函数Function的实例，因此，所有构造函数可以访问Function.prototype对象&lt;/p&gt;&lt;/li&gt;
</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line"><span class="keyword">var</span> f1 = <span class="keyword">new</span> Foo();</div><div class="line"></div><div class="line">Foo.prototype.x = <span class="string">"hello"</span>;</div><div class="line">f1.x   <span class="comment">// hello</span></div><div class="line">Foo.x  <span class="comment">// undefined</span></div></pre></td></tr></table></figure>
<p></p><p>我们利用Foo.prototype设置构造函数Foo所有实例的属性，注意，我们并不单单只是设置f1.prototype对象里面的属性，换句话说就是，一个构造函数所有实例共享同一个原型对象，这一点非常重要</p><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Foo</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line"><span class="keyword">var</span> f1 = <span class="keyword">new</span> Foo();</div><div class="line"><span class="keyword">var</span> f2 = <span class="keyword">new</span> Foo();</div><div class="line"></div><div class="line">Foo.prototype.x = <span class="string">"hello"</span>;</div><div class="line">f1.x   <span class="comment">// hello</span></div><div class="line">f2.x   <span class="comment">// hello</span></div></pre></td></tr></table></figure><p></p>
<pre><code>&lt;li&gt;
</code></pre><p></p><p>所有对象（函数也是对象）的原型最终都指向Object.prototype，而Object.prototype的原型是null</p><br>    <br>    <li><p></p>
<p></p><p>当查找一个对象的属性时，JavaScript 会向上遍历原型链，如果找到了，就不会继续往上找，否则会一直查找到原型链的顶部 – Object.prototype，但是仍然没有找到指定的属性，就会返回 undefined</p><p></p>
<pre><code class="JS"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>{ } 
f1 = <span class="keyword">new</span> foo();
f2 = <span class="keyword">new</span> foo();
foo.prototype.x = <span class="string">"hello"</span>;

f1.x  =&gt; <span class="string">"hello"</span> 
f2.x  =&gt; <span class="string">"hello"</span>;

f1.x = <span class="string">"goodbye"</span>;   

f1.x  =&gt; <span class="string">"goodbye"</span>  <span class="comment">//设置f1的x属性为"goodbye"时，由于在f1对象中找到了x，就不会继续去查找foo.prototype里面的x</span>
f2.x  =&gt; <span class="string">"hello"</span>

<span class="keyword">delete</span> f1.x
f1.x  =&gt; <span class="string">"hello"</span>;   <span class="comment">// 删除f1中的x，则分为foo.prototype里面的x</span>
</code></pre>
<pre><code>&lt;/li&gt;
</code></pre><p></p>
<p>###参考资料<br>汤姆大叔：<a class="reference" href="http://www.cnblogs.com/TomXu/archive/2012/01/05/2305453.html" target="_blank">深入理解JavaScript系列（5）：强大的原型和原型链</a><br><br>阮一峰：<a class="reference" href="http://javascript.ruanyifeng.com/oop/inheritance.html" target="_blank">继承 – JavaScript 标准参考教程（alpha）</a><br><br><a class="reference" href="http://www.mollypages.org/misc/js.mp" target="_blank">Javascript Object Hierarchy</a><br></p>
</li>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、JS原型的关系图&quot;&gt;&lt;a href=&quot;#一、JS原型的关系图&quot; class=&quot;headerlink&quot; title=&quot;一、JS原型的关系图&quot;&gt;&lt;/a&gt;一、JS原型的关系图&lt;/h2&gt;&lt;p&gt;&lt;img class=&quot;img&quot; src=&quot;/media/images/pr
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.yanjiazhen.com/categories/javascript/"/>
    
    
      <category term="JS" scheme="http://www.yanjiazhen.com/tags/js/"/>
    
      <category term="JavaScript" scheme="http://www.yanjiazhen.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript闭包</title>
    <link href="http://www.yanjiazhen.com/2015/04/javascript-closures.html"/>
    <id>http://www.yanjiazhen.com/2015/04/javascript-closures.html</id>
    <published>2015-04-04T14:10:33.000Z</published>
    <updated>2017-07-31T06:30:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>学习了变量对象VO和作用域链之后，就可以更好地来学习和理解闭包</p>
<h2 id="二、概念"><a href="#二、概念" class="headerlink" title="二、概念"></a>二、概念</h2><p>闭包：代码块和创建该代码块的上下文中数据的结合。<br><br>自由变量：是指在函数中使用的，但既不是函数参数也不是函数的局部变量的变量<br><br>例子：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">testFn</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> localVar = <span class="number">10</span>;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">innerFn</span>(<span class="params">innerParam</span>) </span>&#123;</div><div class="line">    alert(innerParam + localVar);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> innerFn;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> someFn = testFn();</div><div class="line">someFn(<span class="number">20</span>); <span class="comment">// 30</span></div></pre></td></tr></table></figure>
<p>对于innerFn函数来说，localVar就属于自由变量<br>ECMAScript中，闭包指的是：</p>
<p><ul><br>    <li>从理论角度：<br>    <p class="info">所有的函数。因为它们都在创建的时候就将上层上下文的数据保存起来了。哪怕是简单的全局变量也是如此，因为函数中访问全局变量就相当于是在访问自由变量，这个时候使用最外层的作用域。</p></li><br>    <li><br>        从实践角度：</li></ul></p>
<p></p><p class="info">以下函数才算是闭包：即使创建它的上下文已经销毁，它仍然存在（比如，内部函数从父函数中返回）<br>在代码中引用了自由变量</p><br>    <br><p></p>
<p>##三、闭包的实现<br>这里还是有必要再次强调下：<b class="key">ECMAScript只使用静态（词法）作用域</b><br>下面这个例子可以说明动态作用域和静态作用域（伪代码）<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> z = <span class="number">10</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  alert(z);</div><div class="line">&#125;</div><div class="line"></div><div class="line">foo(); <span class="comment">// 10 – 使用静态和动态作用域的时候</span></div><div class="line"></div><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> z = <span class="number">20</span>;</div><div class="line">  <span class="comment">// 变量"z"在上下文中静态保存的，在该函数创建的时候就保存在函数的内部属性[[scope]]中</span></div><div class="line">  foo(); <span class="comment">// 10 而不是20,   10 – 使用静态作用域, 20 – 使用动态作用域</span></div><div class="line"></div><div class="line">&#125;)();</div><div class="line"></div><div class="line"><span class="comment">// 将foo作为参数的时候是一样的</span></div><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">funArg</span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> z = <span class="number">30</span>;</div><div class="line">  funArg(); <span class="comment">// 10 而不是20,   10 – 静态作用域, 30 – 动态作用域</span></div><div class="line"></div><div class="line">&#125;)(foo);</div></pre></td></tr></table></figure></p>
<p>我们看到，如果采用动态作用域，自由变量是在当前活跃的动态链中查询的，而不是在函数创建的时候保存起来的静态作用域链中查询的。<br><br>还是那句很重要的话：<b class="key">在函数创建时被存储－－静态（不变的），永远永远，直至函数销毁。即：函数可以永不调用，但[[scope]]属性已经写入，并存储在函数对象中。</b><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  alert(x);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// foo是闭包</span></div><div class="line">foo: <span class="xml"><span class="tag">&lt;<span class="name">FunctionObject</span>&gt;</span> = &#123;</span></div><div class="line">  [[Call]]: &lt;code block of foo&gt;,</div><div class="line">  [[Scope]]: [</div><div class="line">    global: &#123;</div><div class="line">      x: 10</div><div class="line">    &#125;</div><div class="line">  ],</div><div class="line">  ... // 其它属性</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>##四、所有对象都引用一个[[Scope]]<br>这里还要注意的是：在ECMAScript中，同一个父上下文中创建的闭包是共用一个[[Scope]]属性的。也就是说，某个闭包对其中[[Scope]]的变量做修改会影响到其他闭包对其变量的读取，这就是说：<b class="key">所有的内部函数都共享同一个父作用域</b><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> firstClosure;</div><div class="line"><span class="keyword">var</span> secondClosure;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> x = <span class="number">1</span>;</div><div class="line"></div><div class="line">  firstClosure = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> ++x; &#125;;</div><div class="line">  secondClosure = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> --x; &#125;;</div><div class="line"></div><div class="line">  x = <span class="number">2</span>; <span class="comment">// 影响 AO["x"], 在2个闭包公有的[[Scope]]中</span></div><div class="line"></div><div class="line">  alert(firstClosure()); <span class="comment">// 3, 通过第一个闭包的[[Scope]]</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">foo();</div><div class="line"></div><div class="line">alert(firstClosure()); <span class="comment">// 4</span></div><div class="line">alert(secondClosure()); <span class="comment">// 3</span></div></pre></td></tr></table></figure></p>
<p>关于这个功能有一个非常普遍的错误认识，开发人员在循环语句里创建函数（内部进行计数）的时候经常得不到预期的结果，而期望是每个函数都有自己的值。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> data = [];</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> k = <span class="number">0</span>; k &lt; <span class="number">3</span>; k++) &#123;</div><div class="line">  data[k] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    alert(k);</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">data[<span class="number">0</span>](); <span class="comment">// 3, 而不是0</span></div><div class="line">data[<span class="number">1</span>](); <span class="comment">// 3, 而不是1</span></div><div class="line">data[<span class="number">2</span>](); <span class="comment">// 3, 而不是2</span></div></pre></td></tr></table></figure></p>
<p>上述例子就证明了 —— 同一个上下文中创建的闭包是共用一个[[Scope]]属性的。因此上层上下文中的变量“k”是可以很容易就被改变的。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">activeContext.Scope = [</div><div class="line">  ... <span class="comment">// 其它变量对象</span></div><div class="line">  &#123;<span class="attr">data</span>: [...], <span class="attr">k</span>: <span class="number">3</span>&#125; <span class="comment">// 活动对象</span></div><div class="line">];</div><div class="line"></div><div class="line">data[<span class="number">0</span>].[[Scope]] === Scope;</div><div class="line">data[<span class="number">1</span>].[[Scope]] === Scope;</div><div class="line">data[<span class="number">2</span>].[[Scope]] === Scope;</div></pre></td></tr></table></figure></p>
<p>这样一来，在函数激活的时候，最终使用到的k就已经变成了3了。如下所示，创建一个闭包就可以解决这个问题了：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> data = [];</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> k = <span class="number">0</span>; k &lt; <span class="number">3</span>; k++) &#123;</div><div class="line">  data[k] = (<span class="function"><span class="keyword">function</span> <span class="title">_helper</span>(<span class="params">x</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      alert(x);</div><div class="line">    &#125;;</div><div class="line">  &#125;)(k); <span class="comment">// 传入"k"值</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 现在结果是正确的了</span></div><div class="line">data[<span class="number">0</span>](); <span class="comment">// 0</span></div><div class="line">data[<span class="number">1</span>](); <span class="comment">// 1</span></div><div class="line">data[<span class="number">2</span>](); <span class="comment">// 2</span></div></pre></td></tr></table></figure></p>
<p>让我们来看看上述代码都发生了什么？函数“helper”创建出来之后，通过传入参数“k”激活。其返回值也是个函数，该函数保存在对应的数组元素中。这种技术产生了如下效果： 在函数激活时，每次“_helper”都会创建一个新的变量对象，其中含有参数“x”，“x”的值就是传递进来的“k”的值。这样一来，返回的函数的[[Scope]]就成了如下所示：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">data[<span class="number">0</span>].[[Scope]] === [</div><div class="line">  ... <span class="comment">// 其它变量对象</span></div><div class="line">  父级上下文中的活动对象AO: &#123;<span class="attr">data</span>: [...], <span class="attr">k</span>: <span class="number">3</span>&#125;,</div><div class="line">  _helper上下文中的活动对象AO: &#123;<span class="attr">x</span>: <span class="number">0</span>&#125;</div><div class="line">];</div><div class="line"></div><div class="line">data[<span class="number">1</span>].[[Scope]] === [</div><div class="line">  ... <span class="comment">// 其它变量对象</span></div><div class="line">  父级上下文中的活动对象AO: &#123;<span class="attr">data</span>: [...], <span class="attr">k</span>: <span class="number">3</span>&#125;,</div><div class="line">  _helper上下文中的活动对象AO: &#123;<span class="attr">x</span>: <span class="number">1</span>&#125;</div><div class="line">];</div><div class="line"></div><div class="line">data[<span class="number">2</span>].[[Scope]] === [</div><div class="line">  ... <span class="comment">// 其它变量对象</span></div><div class="line">  父级上下文中的活动对象AO: &#123;<span class="attr">data</span>: [...], <span class="attr">k</span>: <span class="number">3</span>&#125;,</div><div class="line">  _helper上下文中的活动对象AO: &#123;<span class="attr">x</span>: <span class="number">2</span>&#125;</div><div class="line">];</div></pre></td></tr></table></figure></p>
<p>###return<br>另外一个特性是从闭包中返回。在ECMAScript中，闭包中的返回语句会将控制流返回给调用上下文（调用者）。<br><br>ECMAScript标准的退出行为如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getElement</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].forEach(<span class="function"><span class="keyword">function</span> (<span class="params">element</span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (element % <span class="number">2</span> == <span class="number">0</span>) &#123;</div><div class="line">      <span class="comment">// 返回给函数"forEach"函数</span></div><div class="line">      <span class="comment">// 而不是返回给getElement函数</span></div><div class="line">      alert(<span class="string">'found: '</span> + element); <span class="comment">// found: 2</span></div><div class="line">      <span class="keyword">return</span> element;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然而，在ECMAScript中通过try catch可以实现如下效果：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getElement</span>(<span class="params"></span>) </span>&#123;</div><div class="line"><span class="keyword">var</span> $<span class="keyword">break</span> = &#123;&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getElement</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line"></div><div class="line">    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].forEach(<span class="function"><span class="keyword">function</span> (<span class="params">element</span>) </span>&#123;</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (element % <span class="number">2</span> == <span class="number">0</span>) &#123;</div><div class="line">        <span class="comment">// // 从getElement中"返回"</span></div><div class="line">        alert(<span class="string">'found: '</span> + element); <span class="comment">// found: 2</span></div><div class="line">        $<span class="keyword">break</span>.data = element;</div><div class="line">        <span class="keyword">throw</span> $<span class="keyword">break</span>;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">    &#125;);</div><div class="line"></div><div class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">    <span class="keyword">if</span> (e == $<span class="keyword">break</span>) &#123;</div><div class="line">      <span class="keyword">return</span> $<span class="keyword">break</span>.data;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">alert(getElement()); <span class="comment">// 2</span></div></pre></td></tr></table></figure></p>
<p>###参考链接<br>汤姆大叔：<a class="reference" href="http://www.cnblogs.com/TomXu/archive/2012/01/31/2330252.html" target="_blank">深入理解JavaScript系列（16）：闭包（Closures）</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h2&gt;&lt;p&gt;学习了变量对象VO和作用域链之后，就可以更好地来学习和理解闭包&lt;/p&gt;
&lt;h2 id=&quot;二、概念&quot;&gt;&lt;a href=&quot;#二、
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.yanjiazhen.com/categories/javascript/"/>
    
    
      <category term="JS" scheme="http://www.yanjiazhen.com/tags/js/"/>
    
      <category term="JavaScript" scheme="http://www.yanjiazhen.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript作用域链</title>
    <link href="http://www.yanjiazhen.com/2015/04/javascript-scope-chain.html"/>
    <id>http://www.yanjiazhen.com/2015/04/javascript-scope-chain.html</id>
    <published>2015-04-03T13:32:29.000Z</published>
    <updated>2017-07-31T06:30:56.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>在学习了变量对象（VO）之后，我们已经知道一个执行上下文的数据（变量、函数声明和函数的形参）作为属性储存在变量对象中。同时我们也知道变量对象在每次进入上下文时创建，并填入初始值，值的更新出现在代码执行阶段。有了这个基础，就可以来了解作用域链。</p>
<h2 id="二、定义"><a href="#二、定义" class="headerlink" title="二、定义"></a>二、定义</h2><p>如果要简要的描述并展示其重点，那么作用域链大多数与内部函数相关。<br><br>看一个例子：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123; </div><div class="line">  <span class="keyword">var</span> y = <span class="number">20</span>; </div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    alert(x + y);</div><div class="line">  &#125; </div><div class="line">  <span class="keyword">return</span> bar; </div><div class="line">&#125;</div><div class="line"> </div><div class="line">foo()(); <span class="comment">// 30</span></div></pre></td></tr></table></figure></p>
<p>每个上下文拥有自己的变量对象（VO)；<b class="keyword">对于全局上下文，它是全局对象本身；对于函数，它是活动对象。</b><br><br><b class="keyword">作用域链正式内部上下文所有变量对象（包括父变量对象）的列表，此链用来查询变量。在上面的例子中“bar”上下文的作用域链包括AO(bar)、AO(foo)、VO(global)</b><br><br>函数上下文的作用域链实在函数<b class="keyword">函数调用时创建</b>的，包含活动对象和这个函数内部的<b class="keyword">[[scope]]属性</b>。在上限为中示意如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">activeExecutionContext = &#123;</div><div class="line">    VO: &#123;...&#125;, <span class="comment">// or AO</span></div><div class="line">    <span class="keyword">this</span>: thisValue,</div><div class="line">    Scope: [ <span class="comment">// Scope chain</span></div><div class="line">      <span class="comment">// 所有变量对象的列表</span></div><div class="line">      <span class="comment">// for identifiers lookup</span></div><div class="line">    ]</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>Scope = AO + [[Scope]]<br>这种联合和标识符解析过程，我们将在下面讨论，这与函数的生命周期相关。</p>
<h2 id="三、函数的生命周期"><a href="#三、函数的生命周期" class="headerlink" title="三、函数的生命周期"></a>三、函数的生命周期</h2><p>函数的生命周期分为<b class="key">创建和激活阶段（调用时）</b></p>
<h3 id="函数创建"><a href="#函数创建" class="headerlink" title="函数创建"></a>函数创建</h3><p>让我们看看在全局上下文中的变量和函数声明<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> y = <span class="number">20</span>;</div><div class="line">  alert(x + y);</div><div class="line">&#125;</div><div class="line"> </div><div class="line">foo(); <span class="comment">// 30</span></div></pre></td></tr></table></figure></p>
<p>在函数激活时，我们得到了正确的结果 – 30<br><br>让我们看看函数foo的活动对象VO<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">fooContext.AO = &#123;</div><div class="line">	y: <span class="literal">undefined</span> <span class="comment">// undefined – 执行代码的时候是20 – at activation</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>此前，我们仅仅谈到有关当前上下文的变量对象，这里，我们看到变量“y”在函数“foo”中定义（意味着它在foo上下文的AO中），但“x”并没有在“foo”中定义，当然它也就不会添加到“foo”的AO中。所以，看起来好像“x”相对于函数“foo”根本就不存在，之所以在foo中能找到“x”，就是通过函数调用时创建的[[scope]]属性来实现的<br><br><br><br><b class="kw">注意这重要的一点－－[[scope]]在函数创建时被存储－－静态（不变的），永远永远，直至函数销毁。即：函数可以永不调用，但[[scope]]属性已经写入，并存储在函数对象中。</b><br><br><br><br>另外一个需要注意的是，[[scope]]是函数的一个属性而不是上下文。在上面的例子中，函数“foo”的[[scope]]如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">foo.[[Scope]] = [</div><div class="line">  globalContext.VO <span class="comment">// === Global</span></div><div class="line">];</div></pre></td></tr></table></figure></p>
<p>继续，我们知道在函数调用时进入上下文，这时候活动对象被创建，this和作用域（作用域链）被确定。</p>
<h3 id="函数激活"><a href="#函数激活" class="headerlink" title="函数激活"></a>函数激活</h3><p>当进入上下文创建AO/VO之后，上下文的Scope属性（变量查找的一个作用链）作如下定义：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Scope = AO|VO + [[Scope]]</div></pre></td></tr></table></figure></p>
<p>上面代码的意思是：活动对象是作用域数组的第一个对象，即添加到作用域的前端。<br>Scope = [AO].concat([[Scope]]);<br>例子：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> y = <span class="number">20</span>;</div><div class="line"> </div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> z = <span class="number">30</span>;</div><div class="line">    alert(x +  y + z);</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  bar();</div><div class="line">&#125;</div><div class="line"> </div><div class="line">foo(); <span class="comment">// 60</span></div></pre></td></tr></table></figure></p>
<p>对此，我们有如下的变量/活动对象，函数的的[[scope]]属性以及上下文的作用域链：<br><br>全局上下文的变量对象是：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">globalContext.VO === Global = &#123;</div><div class="line">	x: <span class="number">10</span></div><div class="line">	foo: <span class="xml"><span class="tag">&lt;<span class="name">reference</span> <span class="attr">to</span> <span class="attr">function</span>&gt;</span></span></div><div class="line"><span class="xml">&#125;;</span></div></pre></td></tr></table></figure></p>
<p>在“foo”创建时，“foo”的[[scope]]属性是：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">foo.[[Scope]] = [</div><div class="line">	globalContext.VO</div><div class="line">];</div></pre></td></tr></table></figure></p>
<p>在“foo”激活时（进入上下文），“foo”上下文的活动对象是：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">fooContext.AO = &#123;</div><div class="line">	y: <span class="number">20</span>,</div><div class="line">	bar: <span class="xml"><span class="tag">&lt;<span class="name">reference</span> <span class="attr">to</span> <span class="attr">function</span>&gt;</span></span></div><div class="line"><span class="xml">&#125;;</span></div></pre></td></tr></table></figure></p>
<p>“foo”上下文的作用域链为：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">fooContext.Scope = fooContext.AO + foo.[[Scope]]</div><div class="line"> </div><div class="line">fooContext.Scope = [</div><div class="line">  fooContext.AO,</div><div class="line">  globalContext.VO</div><div class="line">];</div></pre></td></tr></table></figure></p>
<p>内部函数“bar”创建时，其[[scope]]为：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">bar.[[Scope]] = [</div><div class="line">	fooContext.AO,</div><div class="line">	globalContext.VO</div><div class="line">];</div></pre></td></tr></table></figure></p>
<p>在“bar”激活时，“bar”上下文的活动对象为：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">barContext.AO = &#123;</div><div class="line">	z: <span class="number">30</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>“bar”上下文的作用域链为：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">barContext.Scope = barContext.AO + bar.[[Scope]] <span class="comment">// i.e.:</span></div><div class="line"> </div><div class="line">barContext.Scope = [</div><div class="line">	barContext.AO,</div><div class="line">	fooContext.AO,</div><div class="line">	globalContext.VO</div><div class="line">];</div></pre></td></tr></table></figure></p>
<p>对“x”、“y”、“z”的标识符解析如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">- <span class="string">"x"</span></div><div class="line">-- barContext.AO <span class="comment">// not found</span></div><div class="line">-- fooContext.AO <span class="comment">// not found</span></div><div class="line">-- globalContext.VO <span class="comment">// found - 10</span></div><div class="line"></div><div class="line">- <span class="string">"y"</span></div><div class="line">-- barContext.AO <span class="comment">// not found</span></div><div class="line">-- fooContext.AO <span class="comment">// found - 20</span></div><div class="line"></div><div class="line">- <span class="string">"z"</span></div><div class="line">-- barContext.AO <span class="comment">// found - 30</span></div></pre></td></tr></table></figure></p>
<h2 id="作用域特性"><a href="#作用域特性" class="headerlink" title="作用域特性"></a>作用域特性</h2><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>在ECMAScript中，闭包与函数的[[scope]]直接相关，正如前面提到的，<b class="kw">[[scope]]在函数创建时被储存，与函数共存亡。实际上，闭包是函数代码和其[[scope]]的结合</b>,例如<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  alert(x);</div><div class="line">&#125;</div><div class="line"> </div><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> x = <span class="number">20</span>;</div><div class="line">  foo(); <span class="comment">// 10, but not 20</span></div><div class="line">&#125;)();</div></pre></td></tr></table></figure></p>
<p>在标识符解析过程中，使用函数创建时定义的词法作用域 – 变量解析为10，而不是20。此外，这个例子也清晰地表明，一个函数（这个例子中从函数“foo”返回的匿名函数）的[[scope]]的<b class="key">持续存在</b>，即使在函数创建的作用域已经完成之后。</p>
<h3 id="二维作用域链查找"><a href="#二维作用域链查找" class="headerlink" title="二维作用域链查找"></a>二维作用域链查找</h3><p>在作用域链中查找最重要的一点是变量对象的属性（如果有的话）须考虑其中－－源于ECMAScript 的原型特性。如果一个属性在对象中没有直接找到，查询将在原型链中继续。即常说的二维链查找。（1）作用域链环节；（2）每个作用域链－－深入到原型链环节。如果在Object.prototype 中定义了属性，我们能看到这种效果。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  alert(x);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="built_in">Object</span>.prototype.x = <span class="number">10</span>;</div><div class="line"> </div><div class="line">foo(); <span class="comment">// 10</span></div></pre></td></tr></table></figure></p>
<p>活动对象没有原型，我们可以在下面的例子中看到：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line"> </div><div class="line">  <span class="keyword">var</span> x = <span class="number">20</span>;</div><div class="line"> </div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    alert(x);</div><div class="line">  &#125;</div><div class="line"> </div><div class="line">  bar();</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="built_in">Object</span>.prototype.x = <span class="number">10</span>;</div><div class="line"> </div><div class="line">foo(); <span class="comment">// 20</span></div></pre></td></tr></table></figure></p>
<p>如果函数“bar”上下文的激活对象有一个原型，那么“x”将在Object.prototype 中被解析，因为它在函数“bar”的AO中不被直接解析。</p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p>汤姆大叔：<a class="reference" href="http://www.cnblogs.com/TomXu/archive/2012/01/18/2312463.html" target="_blank">深入理解JavaScript系列（14）：作用域链(Scope Chain)</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h2&gt;&lt;p&gt;在学习了变量对象（VO）之后，我们已经知道一个执行上下文的数据（变量、函数声明和函数的形参）作为属性储存在变量对象中。同时我
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.yanjiazhen.com/categories/javascript/"/>
    
    
      <category term="JS" scheme="http://www.yanjiazhen.com/tags/js/"/>
    
      <category term="JavaScript" scheme="http://www.yanjiazhen.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript变量对象</title>
    <link href="http://www.yanjiazhen.com/2015/04/javascript-variable-object.html"/>
    <id>http://www.yanjiazhen.com/2015/04/javascript-variable-object.html</id>
    <published>2015-04-02T05:16:49.000Z</published>
    <updated>2017-07-31T06:31:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h2><p>如果变量与执行上下文相关，那变量自己应该知道它的数据存储在哪里，并且知道如何访问。这种机制称为变量对象(variable object)。<br><br><br>变量对象（缩写VO）是一个与执行上下文有关的特殊对象，它储存着在上下文中声明的一下内容：</p>
<p><ul><br>    <li>函数的形参（如果是在函数的执行上下文中）</li><br>    <li>函数的声明（FunctionDeclaration，FD）</li><br>    <li>变量声明（var，VariableDeclaration）</li><br></ul><br>当我们声明一个变量或一个函数的时候，和我们创建VO新属性的时候一样没有别的区别（即：有名称以及对应的值）。例如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">x</span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> b = <span class="number">20</span>;</div><div class="line">&#125;;</div><div class="line"> </div><div class="line">test(<span class="number">30</span>);</div></pre></td></tr></table></figure></p>
<p>对应的变量对象是：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 全局上下文的变量对象</span></div><div class="line">VO(globalContext) = &#123;</div><div class="line">	a: <span class="number">10</span>,</div><div class="line">	test: <span class="xml"><span class="tag">&lt;<span class="name">reference</span> <span class="attr">to</span> <span class="attr">function</span>&gt;</span></span></div><div class="line"><span class="xml">&#125;;</span></div><div class="line"><span class="xml"> </span></div><div class="line"><span class="xml">// test函数上下文的变量对象</span></div><div class="line"><span class="xml">VO(test functionContext) = &#123;</span></div><div class="line"><span class="xml">	x: 30,</span></div><div class="line"><span class="xml">	b: 20</span></div><div class="line"><span class="xml">&#125;;</span></div></pre></td></tr></table></figure></p>
<h2 id="二、不同执行上下文中的变量对象"><a href="#二、不同执行上下文中的变量对象" class="headerlink" title="二、不同执行上下文中的变量对象"></a>二、不同执行上下文中的变量对象</h2><p>变量对象的两种类型：全局上下文变量对象和函数上下文变量对象</p>
<h3 id="全局上下文中的变量"><a href="#全局上下文中的变量" class="headerlink" title="全局上下文中的变量"></a>全局上下文中的变量</h3><p>全局对象的定义：在进入任何执行上下文之前就已经创建了的对象；<br>这个对象只存在一份，它的属性在程序中任何地方都可以访问，全局对象的生命周期终止于程序退出那一刻。<br><br><br><br>全局对象初始创建阶段将Math、String、Date、parseInt作为自身属性，等属性初始化，同时创建一个指向全局对象本身的属性，例如，在DOM中，全局对象的window属性就可以应用全局变量自身<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">global = &#123;</div><div class="line">	<span class="built_in">Math</span>: <span class="xml"><span class="tag">&lt;<span class="name">...</span>&gt;</span>,</span></div><div class="line"><span class="xml">	String: <span class="tag">&lt;<span class="name">...</span>&gt;</span></span></div><div class="line"><span class="xml">	...</span></div><div class="line"><span class="xml">	...</span></div><div class="line"><span class="xml">	window: global //引用自身</span></div><div class="line"><span class="xml">&#125;;</span></div></pre></td></tr></table></figure></p>
<p>当访问全局对象的属性时通常会忽略掉前缀，这是因为<b class="keyword">全局对象是不能通过名称直接访问的</b>。不过我们依然可以通过全局上下文的this来访问全局对象，同样也可以递归引用自身。例如，DOM中的window。综上所述，代码可以简写为：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">10</span>;	<span class="comment">// 就是global.a = 10;</span></div><div class="line"></div><div class="line"><span class="comment">// 带有前缀</span></div><div class="line">alert(<span class="built_in">window</span>.a);<span class="comment">// 相当于global.window.a，间接通过global访问，也就相当于global.a</span></div><div class="line"><span class="keyword">this</span>.b = <span class="number">20</span>;	<span class="comment">// 就是global.b = 20;</span></div></pre></td></tr></table></figure></p>
<p>全局上下文中的变量对象VO，在这里就是全局对象自己<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">VO(globalContext)=== global;</div></pre></td></tr></table></figure></p>
<h3 id="函数上下文中的变量对象"><a href="#函数上下文中的变量对象" class="headerlink" title="函数上下文中的变量对象"></a>函数上下文中的变量对象</h3><p><b class="keyword">在函数执行上下文中，VO是不能直接访问的，此时由活动对象(activation object,缩写为AO)扮演VO的角色。</b><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">VO(functionContext)=== AO;</div></pre></td></tr></table></figure></p>
<p>活动对象是<b class="keyword">在进入函数执行上下文时刻被创建的</b>，它通过函数的arguments属性初始化。arguments属性的值就是Arguments对象：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">arguments</span>: <span class="xml"><span class="tag">&lt;<span class="name">Arguments</span> <span class="attr">Object</span>&gt;</span></span></div></pre></td></tr></table></figure></p>
<p>Arguments对象是活动对象的一个属性，它包括如下属性：</p>
<p><ul><br>    <li>callee – 指向当前函数的应用</li><br>    <li>length – 真正传递的参数个数</li><br>    <li>properties-indexes (字符串类型的整数) 属性的值就是函数的参数值(按参数列表从左到右排列)。 properties-indexes内部元素的个数等于arguments.length. properties-indexes 的值和实际传递进来的参数之间是共享的。</li><br></ul><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">x, y, z</span>) </span>&#123;</div><div class="line"> </div><div class="line">  <span class="comment">// 声明的函数参数数量arguments (x, y, z)</span></div><div class="line">  alert(foo.length); <span class="comment">// 3</span></div><div class="line"> </div><div class="line">  <span class="comment">// 真正传进来的参数个数(only x, y)</span></div><div class="line">  alert(<span class="built_in">arguments</span>.length); <span class="comment">// 2</span></div><div class="line"> </div><div class="line">  <span class="comment">// 参数的callee是函数自身</span></div><div class="line">  alert(<span class="built_in">arguments</span>.callee === foo); <span class="comment">// true</span></div><div class="line"> </div><div class="line">  <span class="comment">// 参数共享</span></div><div class="line"> </div><div class="line">  alert(x === <span class="built_in">arguments</span>[<span class="number">0</span>]); <span class="comment">// true</span></div><div class="line">  alert(x); <span class="comment">// 10</span></div><div class="line"> </div><div class="line">  <span class="built_in">arguments</span>[<span class="number">0</span>] = <span class="number">20</span>;</div><div class="line">  alert(x); <span class="comment">// 20</span></div><div class="line"> </div><div class="line">  x = <span class="number">30</span>;</div><div class="line">  alert(<span class="built_in">arguments</span>[<span class="number">0</span>]); <span class="comment">// 30</span></div><div class="line"> </div><div class="line">  <span class="comment">// 不过，没有传进来的参数z，和参数的第3个索引值是不共享的</span></div><div class="line"></div><div class="line">  z = <span class="number">40</span>;</div><div class="line">  alert(<span class="built_in">arguments</span>[<span class="number">2</span>]); <span class="comment">// undefined</span></div><div class="line"> </div><div class="line">  <span class="built_in">arguments</span>[<span class="number">2</span>] = <span class="number">50</span>;</div><div class="line">  alert(z); <span class="comment">// 40</span></div><div class="line"> </div><div class="line">&#125;</div><div class="line"> </div><div class="line">foo(<span class="number">10</span>, <span class="number">20</span>);</div></pre></td></tr></table></figure></p>
<h2 id="三、处理上下文代码的2个阶段"><a href="#三、处理上下文代码的2个阶段" class="headerlink" title="三、处理上下文代码的2个阶段"></a>三、处理上下文代码的2个阶段</h2><p>执行上下文的代码被分成两个基本的阶段来处理：</p>
<p><ul><br>    <li>进入执行上下文</li><br>    <li>执行代码</li><br></ul><br>注：这2个阶段的处理是一般行为，和上下文的类型无关（也就是说，在全局上下文和函数上下文中的表现是一样的）。</p>
<h3 id="进入执行上下文"><a href="#进入执行上下文" class="headerlink" title="进入执行上下文"></a>进入执行上下文</h3><p>当进入执行上下文(代码执行之前)时，VO里已经包含了下列属性:</p>
<p><ul><br>    <li><br>        函数的形参（如果是在函数的执行上下文中）:<br><br>        <p class="info">由名称和对应值组成的一个变量对象的属性被创建；没有传递对应参数的话，那么由名称和undefined值组成的一种变量对象的属性也将被创建。</p><br>    </li><br>    <li><br>        函数的声明（FunctionDeclaration，FD）<br>        <p class="info">由名称和对应值（函数对象(function-object)）组成一个变量对象的属性被创建；如果变量对象已经存在相同名称的属性，则完全替换这个属性。</p><br>    </li><br>    <li><br>        变量声明（var，VariableDeclaration）<br>        <p class="info">由名称和对应值（undefined）组成一个变量对象的属性被创建；<b class="keyword">如果变量名称跟已经声明的形式参数或函数相同，则变量声明不会干扰已经存在的这类属性。</b></p><br>    </li><br></ul><br>例如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> c = <span class="number">10</span>;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">d</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line">  <span class="keyword">var</span> e = <span class="function"><span class="keyword">function</span> <span class="title">_e</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line">  (<span class="function"><span class="keyword">function</span> <span class="title">x</span>(<span class="params"></span>) </span>&#123;&#125;);</div><div class="line">&#125;</div><div class="line"> </div><div class="line">test(<span class="number">10</span>); <span class="comment">// call</span></div></pre></td></tr></table></figure></p>
<p>当进入带有参数10的test函数上下文时，AO表现为如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">AO(test) = &#123;</div><div class="line">  a: <span class="number">10</span>,</div><div class="line">  b: <span class="literal">undefined</span>,</div><div class="line">  c: <span class="literal">undefined</span>,</div><div class="line">  d: <span class="xml"><span class="tag">&lt;<span class="name">reference</span> <span class="attr">to</span> <span class="attr">FunctionDeclaration</span> "<span class="attr">d</span>"&gt;</span></span></div><div class="line"><span class="xml">  e: undefined</span></div><div class="line"><span class="xml">&#125;;</span></div></pre></td></tr></table></figure></p>
<p>注意，AO里并不包含函数“x”。这是因为“x” 是一个函数表达式(FunctionExpression, 缩写为 FE) 而不是函数声明，函数表达式不会影响VO。 不管怎样，函数“_e” 同样也是函数表达式，但是就像我们下面将看到的那样，因为它分配给了变量 “e”，所以它可以通过名称“e”来访问。<br><br><br><br>这之后，将进入处理上下文代码的第二个阶段 — 执行代码。</p>
<h3 id="执行代码"><a href="#执行代码" class="headerlink" title="执行代码"></a>执行代码</h3><p>这个周期内，AO/VO已经拥有了属性(不过，并不是所有的属性都有值，大部分属性的值还是系统默认的初始值undefined )。<br><br>还是前面那个例子, AO/VO在代码解释期间被修改如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">AO[<span class="string">'c'</span>] = <span class="number">10</span>;</div><div class="line">AO[<span class="string">'e'</span>] = <span class="xml"><span class="tag">&lt;<span class="name">reference</span> <span class="attr">to</span> <span class="attr">FunctionExpression</span> "<span class="attr">_e</span>"&gt;</span>;</span></div></pre></td></tr></table></figure></p>
<p>再次注意，因为FunctionExpression“_e”保存到了已声明的变量“e”上，所以它仍然存在于内存中。而FunctionExpression “x”却不存在于AO/VO中，也就是说如果我们想尝试调用“x”函数，不管在函数定义之前还是之后，都会出现一个错误“x is not defined”，未保存的函数表达式只有在它自己的定义或递归中才能被调用。<br><br>另一个经典例子：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">alert(x); <span class="comment">// function</span></div><div class="line"> </div><div class="line"><span class="keyword">var</span> x = <span class="number">10</span>;</div><div class="line">alert(x); <span class="comment">// 10</span></div><div class="line"> </div><div class="line">x = <span class="number">20</span>;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">x</span>(<span class="params"></span>) </span>&#123;&#125;;</div><div class="line"> </div><div class="line">alert(x); <span class="comment">// 20</span></div></pre></td></tr></table></figure></p>
<p>在进入上下文时，VO的结构如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">VO = &#123;&#125;;</div><div class="line"> </div><div class="line">VO[<span class="string">'x'</span>] = <span class="xml"><span class="tag">&lt;<span class="name">reference</span> <span class="attr">to</span> <span class="attr">FunctionDeclaration</span> "<span class="attr">x</span>"&gt;</span></span></div><div class="line"><span class="xml"> </span></div><div class="line"><span class="xml">// 找到var x = 10;</span></div><div class="line"><span class="xml">// 如果function "x"没有已经声明的话</span></div><div class="line"><span class="xml">// 这时候"x"的值应该是undefined</span></div><div class="line"><span class="xml">// 但是这个case里变量声明没有影响同名的function的值</span></div><div class="line"><span class="xml"> </span></div><div class="line">VO['x'] = &lt;the value is not disturbed, still function&gt;</div></pre></td></tr></table></figure></p>
<p>紧接着，在执行代码阶段，VO做如下修改：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">VO[<span class="string">'x'</span>] = <span class="number">10</span>;</div><div class="line">VO[<span class="string">'x'</span>] = <span class="number">20</span>;</div></pre></td></tr></table></figure></p>
<p>再来一个常见的例子：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</div><div class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  <span class="keyword">var</span> b = <span class="number">2</span>;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">alert(a); <span class="comment">// 1</span></div><div class="line">alert(b); <span class="comment">// undefined,不是b没有声明，而是b的值是undefined</span></div></pre></td></tr></table></figure></p>
<h2 id="四、关于变量"><a href="#四、关于变量" class="headerlink" title="四、关于变量"></a>四、关于变量</h2><p>通常，各类文章和JavaScript相关的书籍都声称：“不管是使用var关键字(在全局上下文)还是不使用var关键字(在任何地方)，都可以声明一个变量”。请记住，这是错误的概念：<br><b class="keyword">任何时候，变量只能通过使用var关键字才能声明。</b><br>例如:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a = <span class="number">10</span>;</div></pre></td></tr></table></figure></p>
<p>这仅仅是给全局对象新增了一个属性（但它不是变量），所以这个属性在进入上下文中阶段中，不会出现在VO对象中，例如<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">alert(a); <span class="comment">// undefined</span></div><div class="line">alert(b); <span class="comment">// "b" 没有声明</span></div><div class="line"> </div><div class="line">b = <span class="number">10</span>;</div><div class="line"><span class="keyword">var</span> a = <span class="number">20</span>;</div></pre></td></tr></table></figure></p>
<p>进入上下文阶段：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">VO = &#123;</div><div class="line">  a: <span class="literal">undefined</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>让我们改变一下例子代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">alert(a); <span class="comment">// undefined</span></div><div class="line"> </div><div class="line">b = <span class="number">10</span>;</div><div class="line">alert(b); <span class="comment">// 10, 代码执行阶段创建</span></div><div class="line"> </div><div class="line"><span class="keyword">var</span> a = <span class="number">20</span>;</div><div class="line">alert(a); <span class="comment">// 20, 代码执行阶段修改</span></div></pre></td></tr></table></figure></p>
<p>关于变量，还有一个重要的知识点。变量相对于简单属性来说，变量有一个特性(attribute)：{DontDelete},这个特性的含义就是<b class="keyword">不能用delete操作符直接删除变量属性</b>。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">a = <span class="number">10</span>;</div><div class="line">alert(<span class="built_in">window</span>.a); <span class="comment">// 10</span></div><div class="line"> </div><div class="line">alert(<span class="keyword">delete</span> a); <span class="comment">// true</span></div><div class="line"> </div><div class="line">alert(<span class="built_in">window</span>.a); <span class="comment">// undefined</span></div><div class="line"> </div><div class="line"><span class="keyword">var</span> b = <span class="number">20</span>;</div><div class="line">alert(<span class="built_in">window</span>.b); <span class="comment">// 20</span></div><div class="line"> </div><div class="line">alert(<span class="keyword">delete</span> b); <span class="comment">// false</span></div><div class="line"> </div><div class="line">alert(<span class="built_in">window</span>.b); <span class="comment">// still 20</span></div></pre></td></tr></table></figure></p>
<h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><p><b class="keyword">一个执行上下文的数据（变量、函数声明和函数的形参）作为属性储存在变量对象中，变量对象在每次进入上下文时创建，并填入初始值，值的更新出现在代码执行阶段。</b></p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p>汤姆大叔：<a class="reference" href="http://www.cnblogs.com/TomXu/archive/2012/01/16/2309728.html" target="_blank">深入理解JavaScript系列（12）：变量对象（Variable Object）</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、概念&quot;&gt;&lt;a href=&quot;#一、概念&quot; class=&quot;headerlink&quot; title=&quot;一、概念&quot;&gt;&lt;/a&gt;一、概念&lt;/h2&gt;&lt;p&gt;如果变量与执行上下文相关，那变量自己应该知道它的数据存储在哪里，并且知道如何访问。这种机制称为变量对象(variable o
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.yanjiazhen.com/categories/javascript/"/>
    
    
      <category term="JS" scheme="http://www.yanjiazhen.com/tags/js/"/>
    
      <category term="JavaScript" scheme="http://www.yanjiazhen.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript作用域</title>
    <link href="http://www.yanjiazhen.com/2015/04/javascript-scope.html"/>
    <id>http://www.yanjiazhen.com/2015/04/javascript-scope.html</id>
    <published>2015-03-31T16:03:22.000Z</published>
    <updated>2017-07-31T06:32:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>在JavaScript中，作用域有全局作用域和局部作用域两种。</p>
<p>##一、全局作用域（Global Scope）<br>一般来说以下几种情形拥有全局作用域：<br><br>（1）在代码中任何地方都能访问到的对象拥有全局作用域</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> global_name = <span class="string">'global_name'</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> foo_name = <span class="string">'foo_name'</span>;</div><div class="line">    (<span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        alert(foo_name);</div><div class="line">    &#125;)();</div><div class="line">&#125;</div><div class="line">alert(global_name); <span class="comment">// global_name</span></div><div class="line">alert(foo_name);	<span class="comment">// foo_name is not defined</span></div><div class="line">foo();	<span class="comment">// foo_name</span></div><div class="line">bar();	<span class="comment">// bar is not defined</span></div></pre></td></tr></table></figure>
<p>（2）所有未定义直接赋值的变量自动声明为拥有全局变量<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> bar = <span class="number">123</span>;</div><div class="line">    baz = <span class="number">456</span>;</div><div class="line">&#125;</div><div class="line">foo();</div><div class="line">alert(baz); <span class="comment">// 456</span></div><div class="line">alert(bar); <span class="comment">// bar is not defined</span></div></pre></td></tr></table></figure></p>
<p>（3）所有window对象的属性拥有全局作用域</p>
<p>##二、局部作用域（Global Scope）<br>局部作用域只能在某一作用域中访问到，例如函数内部<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> bar = <span class="number">123</span>;</div><div class="line">&#125;</div><div class="line">alert(bar);	<span class="comment">// bar is not defined</span></div></pre></td></tr></table></figure></p>
<p>值得注意的一点，ECMAScript规范指出独立作用域只能通过“函数(function)”代码类型创建，也就是说，for循环并不能创建一个局部的上下文<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">	<span class="built_in">console</span>.log(i);</div><div class="line">&#125;</div><div class="line">alert(i); <span class="comment">// 10(尽管循环已经结束但变量i依然在当前作用域)</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在JavaScript中，作用域有全局作用域和局部作用域两种。&lt;/p&gt;
&lt;p&gt;##一、全局作用域（Global Scope）&lt;br&gt;一般来说以下几种情形拥有全局作用域：&lt;br&gt;&lt;br&gt;（1）在代码中任何地方都能访问到的对象拥有全局作用域&lt;/p&gt;
&lt;figure class=
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.yanjiazhen.com/categories/javascript/"/>
    
    
      <category term="JS" scheme="http://www.yanjiazhen.com/tags/js/"/>
    
      <category term="JavaScript" scheme="http://www.yanjiazhen.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>jQuery_ZeroClipboard_剪贴板</title>
    <link href="http://www.yanjiazhen.com/2015/03/ZeroClipboard.html"/>
    <id>http://www.yanjiazhen.com/2015/03/ZeroClipboard.html</id>
    <published>2015-03-09T04:44:30.000Z</published>
    <updated>2017-08-10T09:24:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>查看demo —&gt; <a class="demo" href="/demo/clipboard.html" target="_blank">剪贴板_ZeroClipboard</a></p>
<p>##1.原理<br>ZeroClipboard利用透明的flash让其漂浮在复制按钮之上，将需要复制的内容传入flash，在通过flash的复制功能把传入的内容复制到剪切板。</p>
<p>##2.使用<br>导入js文件<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/media/js/jquery.zclip.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>js代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $(<span class="string">"span#copy-dynamic"</span>).zclip(&#123;</div><div class="line">        path:<span class="string">"/media/swf/ZeroClipboard.swf"</span>,    </div><div class="line">        copy:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> $(<span class="string">'textarea#dynamic'</span>).val(); &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>##3.注意<br>本地环境测试时，要在服务器环境下运行</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;查看demo —&amp;gt; &lt;a class=&quot;demo&quot; href=&quot;/demo/clipboard.html&quot; target=&quot;_blank&quot;&gt;剪贴板_ZeroClipboard&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##1.原理&lt;br&gt;ZeroClipboard利用透明的flash让其
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.yanjiazhen.com/categories/javascript/"/>
    
    
      <category term="jQuery" scheme="http://www.yanjiazhen.com/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>封装自己的vQuery库</title>
    <link href="http://www.yanjiazhen.com/2015/02/vQuery.html"/>
    <id>http://www.yanjiazhen.com/2015/02/vQuery.html</id>
    <published>2015-02-22T14:34:27.000Z</published>
    <updated>2017-07-31T06:34:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>模拟jQuery，封装自己的小工具库</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> vQuery = <span class="function"><span class="keyword">function</span> (<span class="params">vArg</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> vQuery.fn.init(vArg);</div><div class="line">&#125;</div><div class="line"></div><div class="line">vQuery.fn = vQuery.prototype = &#123;</div><div class="line">    </div><div class="line">    <span class="keyword">constructor</span>: vQuery,</div><div class="line"></div><div class="line">    // 初始化，简单选择器</div><div class="line">    init: function (vArg) &#123;</div><div class="line">        <span class="keyword">this</span>.elements = [];</div><div class="line"></div><div class="line">        <span class="keyword">switch</span>(<span class="keyword">typeof</span> vArg) &#123;</div><div class="line">            <span class="keyword">case</span> <span class="string">'function'</span>: vQuery.addEvent(<span class="built_in">window</span>, <span class="string">'load'</span>, vArg);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">'string'</span>:</div><div class="line">                <span class="keyword">switch</span>(vArg.charAt(<span class="number">0</span>)) &#123;</div><div class="line">                    <span class="keyword">case</span> <span class="string">'#'</span>: <span class="comment">// id</span></div><div class="line">                        <span class="keyword">this</span>.elements.push(<span class="built_in">document</span>.getElementById(vArg.substring(<span class="number">1</span>)));</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    <span class="keyword">case</span> <span class="string">'.'</span>: <span class="comment">// clss</span></div><div class="line">                        <span class="keyword">this</span>.elements = vQuery.getByClass(<span class="built_in">document</span>, vArg.substring(<span class="number">1</span>));</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    <span class="keyword">default</span>: <span class="comment">// tagName</span></div><div class="line">                        <span class="keyword">this</span>.elements = <span class="built_in">document</span>.getElementsByTagName(vArg);</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="string">'object'</span>: </div><div class="line">                <span class="keyword">this</span>.elements.push(vArg);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 拓展方法</span></div><div class="line">vQuery.extend = vQuery.fn.extend = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> arg = <span class="built_in">arguments</span>;</div><div class="line">    <span class="keyword">var</span> length = arg.length;</div><div class="line">    <span class="keyword">if</span> (length === <span class="number">1</span> &amp;&amp; <span class="keyword">typeof</span> arg[<span class="number">0</span>] === <span class="string">'object'</span>) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> name <span class="keyword">in</span> arg[<span class="number">0</span>]) &#123;</div><div class="line">            <span class="keyword">this</span>[name] = arg[<span class="number">0</span>][name];</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (length === <span class="number">2</span>) &#123;</div><div class="line">        <span class="keyword">this</span>[arg[<span class="number">0</span>]] = arg[<span class="number">1</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 给vQuery拓展方法</span></div><div class="line">vQuery.extend(&#123;</div><div class="line">    <span class="comment">// 检测类型</span></div><div class="line">    type: <span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(item).slice(<span class="number">8</span>, <span class="number">-1</span>).toLowerCase();</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 绑定事件</span></div><div class="line">    addEvent: <span class="function"><span class="keyword">function</span> (<span class="params">element, type, fn</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (element.addEventListener) &#123;</div><div class="line">            element.addEventListener(type, <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</div><div class="line">                <span class="keyword">if</span> (fn.call(element) === <span class="literal">false</span>) &#123;</div><div class="line">                    ev.stopPropagation();</div><div class="line">                    ev.preventDefault();</div><div class="line">                &#125;</div><div class="line">            &#125;, <span class="literal">false</span>);  </div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            element.attachEvent(<span class="string">'on'</span> + type, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="keyword">if</span> (fn.call(element) === <span class="literal">false</span>) &#123;</div><div class="line">                    event.cancelBubble = <span class="literal">true</span>;</div><div class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 通过class选择</span></div><div class="line">    getByClass: <span class="function"><span class="keyword">function</span> (<span class="params">str, root, tag</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span>(root)&#123;</div><div class="line">            root = <span class="keyword">typeof</span> root == <span class="string">"string"</span> ? <span class="built_in">document</span>.getElementById(root) : root;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            root = <span class="built_in">document</span>.body;</div><div class="line">        &#125;</div><div class="line">        tag = tag || <span class="string">"*"</span>;</div><div class="line">        <span class="keyword">var</span> els = root.getElementsByTagName(tag),arr = [];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>,n = els.length; i &lt; n; i++)&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>,k = els[i].className.split(<span class="string">" "</span>), l = k.length; j &lt; l; j++)&#123;</div><div class="line">                <span class="keyword">if</span>(k[j] == str)&#123;</div><div class="line">                    arr.push(els[i]);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> arr;</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 合并数组</span></div><div class="line">    appendArr: <span class="function"><span class="keyword">function</span> (<span class="params">arr1, arr2</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> i = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; arr2.length; i++) &#123;</div><div class="line">            arr1.push(arr2[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> arr1;</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 获得元素在其同辈元素的位置</span></div><div class="line">    getIndex: <span class="function"><span class="keyword">function</span> (<span class="params">oElement</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> aBrother = oElement.parentNode.children;</div><div class="line">        <span class="keyword">var</span> i = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; aBrother.length; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (aBrother[i] === oElement) &#123;</div><div class="line">                <span class="keyword">return</span> i;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 操作style</span></div><div class="line">    style: <span class="function"><span class="keyword">function</span> (<span class="params">oElement, attr, value</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="built_in">arguments</span>.length === <span class="number">2</span>) &#123;</div><div class="line">            <span class="keyword">return</span> oElement.currentStyle ? oElement.currentStyle[attr] : getComputedStyle(oElement, <span class="literal">false</span>)[attr];</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">arguments</span>.length === <span class="number">3</span>) &#123;</div><div class="line">            <span class="keyword">switch</span>(attr) &#123;</div><div class="line">                <span class="keyword">case</span> <span class="string">'width'</span>:</div><div class="line">                <span class="keyword">case</span> <span class="string">'height'</span>:</div><div class="line">                <span class="keyword">case</span> <span class="string">'top'</span>:</div><div class="line">                <span class="keyword">case</span> <span class="string">'left'</span>:</div><div class="line">                <span class="keyword">case</span> <span class="string">'right'</span>:</div><div class="line">                <span class="keyword">case</span> <span class="string">'bottom'</span>:</div><div class="line">                    oElement.style[attr] = value + <span class="string">'px'</span>;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="string">'opacity'</span>:</div><div class="line">                    oElement.style.filter = <span class="string">'alpha(opacity:'</span> + value + <span class="string">')'</span>;</div><div class="line">                    oElement.style.opacity = value / <span class="number">100</span>;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">default</span>:</div><div class="line">                    oElement.style[attr] = value;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 运动</span></div><div class="line">    doMove: <span class="function"><span class="keyword">function</span> (<span class="params">oElement, oAttr, fnCallback</span>) </span>&#123;</div><div class="line">        clearInterval(oElement.timer);</div><div class="line">        oElement.timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> bStop = <span class="literal">true</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> property <span class="keyword">in</span> oAttr) &#123;</div><div class="line">                <span class="keyword">var</span> iCur = <span class="built_in">parseFloat</span>(vQuery.style(oElement, property));</div><div class="line">                <span class="keyword">if</span> (property === <span class="string">'opacity'</span>) &#123;</div><div class="line">                    iCur = <span class="built_in">parseInt</span>(iCur.toFixed(<span class="number">2</span>) * <span class="number">100</span>);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">var</span> iSpeed = (oAttr[property] - iCur) / <span class="number">6</span>;</div><div class="line">                iSpeed = iSpeed &gt; <span class="number">0</span> ? <span class="built_in">Math</span>.ceil(iSpeed) : <span class="built_in">Math</span>.floor(iSpeed);</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (iCur != oAttr[property]) &#123;</div><div class="line">                    bStop = <span class="literal">false</span>;</div><div class="line">                    vQuery.style(oElement, property, iCur + iSpeed);</div><div class="line">                &#125; </div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (bStop) &#123;</div><div class="line">                clearInterval(oElement.timer);</div><div class="line">                <span class="keyword">if</span> (fnCallback) &#123;</div><div class="line">                    fnCallback.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>); </div><div class="line">                &#125;   </div><div class="line">            &#125;</div><div class="line">        &#125;, <span class="number">30</span>);</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 给vQuery.fn拓展方法</span></div><div class="line">vQuery.fn.extend(&#123;</div><div class="line">    <span class="comment">// 点击</span></div><div class="line">    click: <span class="function"><span class="keyword">function</span> (<span class="params">fn</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> i = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.elements.length; i++) &#123;</div><div class="line">            vQuery.addEvent(<span class="keyword">this</span>.elements[i], <span class="string">'click'</span>, fn);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 显示</span></div><div class="line">    show: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> i = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.elements.length; i++) &#123;</div><div class="line">            <span class="keyword">this</span>.elements[i].style.display = <span class="string">'block'</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 隐藏</span></div><div class="line">    hide: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> i = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.elements.length; i++) &#123;</div><div class="line">            <span class="keyword">this</span>.elements[i].style.display = <span class="string">'none'</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 鼠标hover</span></div><div class="line">    hover: <span class="function"><span class="keyword">function</span> (<span class="params">fnOver, fnOut</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> i = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.elements.length; i++) &#123;</div><div class="line">            vQuery.addEvent(<span class="keyword">this</span>.elements[i], <span class="string">'mouseover'</span>, fnOver);</div><div class="line">            vQuery.addEvent(<span class="keyword">this</span>.elements[i], <span class="string">'mouseout'</span>, fnOut);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 操作css</span></div><div class="line">    css: <span class="function"><span class="keyword">function</span> (<span class="params">attr, value</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> oFirstElement = <span class="keyword">this</span>.elements[<span class="number">0</span>];</div><div class="line">        <span class="keyword">if</span> (<span class="built_in">arguments</span>.length === <span class="number">2</span>) &#123;</div><div class="line">            <span class="keyword">var</span> i = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.elements.length; i++) &#123;</div><div class="line">                vQuery.style(<span class="keyword">this</span>.elements[i], attr, value);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span> (vQuery.type(attr) === <span class="string">'string'</span>) &#123;</div><div class="line">                <span class="keyword">return</span> oFirstElement.currentStyle ? oFirstElement.currentStyle[attr] : getComputedStyle(oFirstElement, <span class="literal">false</span>)[attr];</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.elements.length; i++) &#123;</div><div class="line">                    <span class="keyword">var</span> key = <span class="string">''</span>;</div><div class="line">                    <span class="keyword">for</span> (key <span class="keyword">in</span> attr) &#123;</div><div class="line">                        vQuery.style(<span class="keyword">this</span>.elements[i], key, attr[key]);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 操作属性</span></div><div class="line">    attr: <span class="function"><span class="keyword">function</span> (<span class="params">attr, value</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="built_in">arguments</span>.length === <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.elements[<span class="number">0</span>][attr];</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">arguments</span>.length === <span class="number">2</span>) &#123;</div><div class="line">            <span class="keyword">var</span> i = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.elements.length; i++) &#123;</div><div class="line">                <span class="keyword">this</span>.elements[i][attr] = value;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 事件切换 </span></div><div class="line">    toggle: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> _arguments = <span class="built_in">arguments</span>;</div><div class="line">        <span class="keyword">var</span> i</div><div class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.elements.length; i++) &#123;</div><div class="line">            (<span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</div><div class="line">                <span class="keyword">var</span> count = <span class="number">0</span>;</div><div class="line">                vQuery.addEvent(obj, <span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                   _arguments[count++%_arguments.length]();</div><div class="line">                &#125;);</div><div class="line">            &#125;)(<span class="keyword">this</span>.elements[i]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 按index选择元素</span></div><div class="line">    eq: <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> $(<span class="keyword">this</span>.elements[n]);</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 查找元素</span></div><div class="line">    find: <span class="function"><span class="keyword">function</span> (<span class="params">str</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> ret = [];</div><div class="line">        <span class="keyword">var</span> i = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i&lt; <span class="keyword">this</span>.elements.length; i++) &#123;</div><div class="line">            <span class="keyword">switch</span>(str.charAt(<span class="number">0</span>)) &#123;</div><div class="line">                <span class="keyword">case</span> <span class="string">'.'</span>: </div><div class="line">                    ret = ret.concat(vQuery.getByClass(<span class="keyword">this</span>.elements[i], str.substring(<span class="number">1</span>)));</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">default</span>: </div><div class="line">                    vQuery.appendArr(ret, <span class="keyword">this</span>.elements[i].getElementsByTagName(str));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">var</span> newVQuery = $();</div><div class="line">        newVQuery.elements = ret;</div><div class="line">        <span class="keyword">return</span> newVQuery;</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 元素位置</span></div><div class="line">    index: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> vQuery.getIndex(<span class="keyword">this</span>.elements[<span class="number">0</span>]);</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 绑定事件</span></div><div class="line">    bind: <span class="function"><span class="keyword">function</span> (<span class="params">sEv, fn</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> i = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.elements.length; i++) &#123;</div><div class="line">            vQuery.addEvent(<span class="keyword">this</span>.elements[i], sEv, fn);</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 动画</span></div><div class="line">    animate: <span class="function"><span class="keyword">function</span> (<span class="params">oAttr</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> i = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.elements.length; i++) &#123;</div><div class="line">            vQuery.doMove(<span class="keyword">this</span>.elements[i], oAttr);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">vQuery.fn.init.prototype = vQuery.fn;</div><div class="line"><span class="built_in">window</span>.$ = vQuery;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;模拟jQuery，封装自己的小工具库&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.yanjiazhen.com/categories/javascript/"/>
    
    
      <category term="jQuery" scheme="http://www.yanjiazhen.com/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>jQuery源码笔记之ready()</title>
    <link href="http://www.yanjiazhen.com/2015/02/jQuery-ready.html"/>
    <id>http://www.yanjiazhen.com/2015/02/jQuery-ready.html</id>
    <published>2015-02-16T13:47:17.000Z</published>
    <updated>2017-08-10T09:24:16.000Z</updated>
    
    <content type="html"><![CDATA[<p><script type="text/jacascript"><br>window.onload = function () {<br>    alert(1);<br>};<br></script></p>
<h2 id="1-load和ready"><a href="#1-load和ready" class="headerlink" title="1. load和ready"></a>1. load和ready</h2><p>load: 页面所有东西加载完毕之后触发、包括图片等等<br><br>ready： DOM加载完毕触发</p>
<h2 id="2-语法"><a href="#2-语法" class="headerlink" title="2. 语法"></a>2. 语法</h2><p>下面两句语法是等价的<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$( fn )</div><div class="line"></div><div class="line">$(<span class="built_in">document</span>).ready( fn )</div></pre></td></tr></table></figure></p>
<h2 id="3-源码执行的结构"><a href="#3-源码执行的结构" class="headerlink" title="3. 源码执行的结构"></a>3. 源码执行的结构</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 执行的顺序是:</span></div><div class="line">$(fn) -&gt;</div><div class="line">$(<span class="built_in">document</span>).ready(fn) -&gt;</div><div class="line">$.fn.ready(fn) -&gt;</div><div class="line">$.ready.promise().done( fn ); -&gt;</div><div class="line">$.ready.promise() -&gt;</div><div class="line">$.ready() -&gt;</div><div class="line">readyList.resolveWith( <span class="built_in">document</span>, [ jQuery ] ); -&gt;</div><div class="line">fn()</div></pre></td></tr></table></figure>
<h2 id="4-源码"><a href="#4-源码" class="headerlink" title="4. 源码"></a>4. 源码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div></pre></td><td class="code"><pre><div class="line">jQuery.fn = jQuery.prototype = &#123;</div><div class="line">	...</div><div class="line"></div><div class="line">	init: <span class="function"><span class="keyword">function</span> (<span class="params"> selector, context, rootjQuery </span>) </span>&#123;</div><div class="line">		</div><div class="line">		...</div><div class="line"></div><div class="line">		<span class="keyword">if</span> ( jQuery.isFunction( selector ) ) &#123;</div><div class="line">			<span class="keyword">return</span> rootjQuery.ready( selector );</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		...</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	...</div><div class="line"></div><div class="line">	ready: <span class="function"><span class="keyword">function</span>(<span class="params"> fn </span>) </span>&#123;</div><div class="line">		<span class="comment">// Add the callback</span></div><div class="line">		jQuery.ready.promise().done( fn );</div><div class="line"></div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	...</div><div class="line">&#125;</div><div class="line"></div><div class="line">jQuery.extend(&#123;</div><div class="line"></div><div class="line">	...</div><div class="line"></div><div class="line">	<span class="comment">// Is the DOM ready to be used? Set to true once it occurs.</span></div><div class="line">	isReady: <span class="literal">false</span>,</div><div class="line"></div><div class="line">	<span class="comment">// A counter to track how many items to wait for before</span></div><div class="line">	<span class="comment">// the ready event fires. See #6781</span></div><div class="line">	readyWait: <span class="number">1</span>,</div><div class="line"></div><div class="line">	<span class="comment">// Hold (or release) the ready event</span></div><div class="line">	holdReady: <span class="function"><span class="keyword">function</span>(<span class="params"> hold </span>) </span>&#123;</div><div class="line">		<span class="keyword">if</span> ( hold ) &#123;</div><div class="line">			jQuery.readyWait++;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			jQuery.ready( <span class="literal">true</span> );</div><div class="line">		&#125;</div><div class="line">	&#125;,</div><div class="line"></div><div class="line">	<span class="comment">// Handle when the DOM is ready</span></div><div class="line">	ready: <span class="function"><span class="keyword">function</span>(<span class="params"> wait </span>) </span>&#123;</div><div class="line"></div><div class="line">		<span class="comment">// Abort if there are pending holds or we're already ready</span></div><div class="line">		<span class="keyword">if</span> ( wait === <span class="literal">true</span> ? --jQuery.readyWait : jQuery.isReady ) &#123;</div><div class="line">			<span class="keyword">return</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// Remember that the DOM is ready</span></div><div class="line">		<span class="comment">// 如果执行holdReady(false)，此时 wait === true ,能走到这里,说明jQuery.readyWait为0,已经准备好触发了</span></div><div class="line">		jQuery.isReady = <span class="literal">true</span>;</div><div class="line"></div><div class="line">		<span class="comment">// If a normal DOM Ready event fired, decrement, and wait if need be</span></div><div class="line">		<span class="comment">// 如果没有执行holdReady(false)，--jQuery.readyWait不为0，则返回，继续等待</span></div><div class="line">		<span class="keyword">if</span> ( wait !== <span class="literal">true</span> &amp;&amp; --jQuery.readyWait &gt; <span class="number">0</span> ) &#123;</div><div class="line">			<span class="keyword">return</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="comment">// If there are functions bound, to execute</span></div><div class="line">		<span class="comment">// resolveWith 本质就是 resolve，不过可以传参</span></div><div class="line">		readyList.resolveWith( <span class="built_in">document</span>, [ jQuery ] );</div><div class="line"></div><div class="line">		<span class="comment">// Trigger any bound ready events</span></div><div class="line">		<span class="comment">// $(document).on('ready',function () &#123;&#125;)</span></div><div class="line">		<span class="keyword">if</span> ( jQuery.fn.trigger ) &#123;</div><div class="line">			jQuery( <span class="built_in">document</span> ).trigger(<span class="string">"ready"</span>).off(<span class="string">"ready"</span>);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	...</div><div class="line"></div><div class="line">&#125;);</div><div class="line"></div><div class="line">jQuery.ready.promise = <span class="function"><span class="keyword">function</span>(<span class="params"> obj </span>) </span>&#123;</div><div class="line"></div><div class="line">	<span class="comment">// 第一次执行时readyList为undefined</span></div><div class="line">	<span class="keyword">if</span> ( !readyList ) &#123;</div><div class="line"></div><div class="line">		<span class="comment">// 创建一个deferred对象</span></div><div class="line">		readyList = jQuery.Deferred();</div><div class="line"></div><div class="line">		<span class="comment">// document.readyState === "complete"文件已完全加载，代表加载成功</span></div><div class="line">		<span class="keyword">if</span> ( <span class="built_in">document</span>.readyState === <span class="string">"complete"</span> ) &#123;</div><div class="line">			<span class="comment">// setTimeout是针对IE的</span></div><div class="line">			setTimeout( jQuery.ready );</div><div class="line"></div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line"></div><div class="line">			<span class="comment">// DOMContentLoaded : DOM解析完触发这个事件</span></div><div class="line">			<span class="built_in">document</span>.addEventListener( <span class="string">"DOMContentLoaded"</span>, completed, <span class="literal">false</span> );</div><div class="line"></div><div class="line">			<span class="comment">// A fallback to window.onload, that will always work</span></div><div class="line">			<span class="comment">// load : 等到所有页面元素加载完成才会触发, 包括页面上的图片等等。</span></div><div class="line">			<span class="built_in">window</span>.addEventListener( <span class="string">"load"</span>, completed, <span class="literal">false</span> );</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> readyList.promise( obj );</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> completed = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="comment">// 只要其中一个事件触发之后，移除2个事件</span></div><div class="line">	<span class="built_in">document</span>.removeEventListener( <span class="string">"DOMContentLoaded"</span>, completed, <span class="literal">false</span> );</div><div class="line">	<span class="built_in">window</span>.removeEventListener( <span class="string">"load"</span>, completed, <span class="literal">false</span> );</div><div class="line">	jQuery.ready();</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="5-holdReady函数"><a href="#5-holdReady函数" class="headerlink" title="5.holdReady函数"></a>5.holdReady函数</h2><p>在$.holdReady()方法允许调用者延迟jQuery的ready事件。这种先进的功能，通常会被用来允许在 ready 事件发生之前，动态加载其它的 JavaScript，例如 jQuery 插件，即使 DOM 可能已经准备就绪。<br><br>例如,加载slide插件，使用插件的slide方法:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$.holdReady(<span class="literal">true</span>)</div><div class="line">$.getScript(<span class="string">"slide.js"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    $.holdReady(<span class="literal">false</span>);</div><div class="line">&#125;);</div><div class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    $(<span class="string">'#slide'</span>).slide();</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;script type=&quot;text/jacascript&quot;&gt;&lt;br&gt;window.onload = function () {&lt;br&gt;    alert(1);&lt;br&gt;};&lt;br&gt;&lt;/script&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-load和ready&quot;&gt;&lt;a href=&quot;#
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.yanjiazhen.com/categories/javascript/"/>
    
    
      <category term="jQuery" scheme="http://www.yanjiazhen.com/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>闭合浮动</title>
    <link href="http://www.yanjiazhen.com/2014/09/css-clear-float.html"/>
    <id>http://www.yanjiazhen.com/2014/09/css-clear-float.html</id>
    <published>2014-09-25T12:30:14.000Z</published>
    <updated>2017-07-31T06:23:03.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、为何要闭合浮动？"><a href="#一、为何要闭合浮动？" class="headerlink" title="一、为何要闭合浮动？"></a>一、为何要闭合浮动？</h2><p>普通流：将窗体自上而下分成一行行, 并在每行中按从左至右的顺序排放元素,即为文档流.(自己的理解是从头到尾按照文档的顺序，该在什么位置就在什么位置，也可以按照上面的意思理解，自上而下，自左到右的顺序)，很多人称之为文档流或者普通文档流，标准一点应该翻译成普通流（normal flow）<br><br><br><br>浮动：浮动元素并<span class="key">不会影响到普通流中的块级元素的布局，只会影响内联元素（通常是文本）的排列</span>；<br>      当浮动元素的高度超出包含框时，包含框不会自动伸高来闭合浮动元素，从而产生<span class="key">高度塌陷</span>的现象，所以需要<span class="key">闭合浮动元素</span>，使其包含框表现出正常的高度。</p>
<h2 id="二、闭合浮动的方法"><a href="#二、闭合浮动的方法" class="headerlink" title="二、闭合浮动的方法"></a>二、闭合浮动的方法</h2><p>闭合浮动有两类方法：</p>
<ul><br>    <li>通过设置父元素 overflow 或者display：table 属性来触发BFC</li><br>    <li>通过在浮动元素的末尾添加一个空元素，设置 clear：both属性，after伪元素其实也是通过 content 在元素的后面生成了内容为一个点的块级元素</li><br></ul>

<h2 id="三、Block-formatting-contexts和hasLayout"><a href="#三、Block-formatting-contexts和hasLayout" class="headerlink" title="三、Block formatting contexts和hasLayout"></a>三、Block formatting contexts和hasLayout</h2><h3 id="Block-formatting-contexts"><a href="#Block-formatting-contexts" class="headerlink" title="Block formatting contexts"></a>Block formatting contexts</h3><p>通俗地来说：创建了BFC的元素就是一个独立的盒子，里面的子元素不会在布局上影响外面的元素，反之亦然，同时BFC任然属于文档中的普通流。<br>那么如何触发BFC呢？</p>
<ul><br>    <li>float 除了none以外的值 </li><br>    <li>overflow 除了visible 以外的值（hidden，auto，scroll ） </li><br>    <li>display (table-cell，table-caption，inline-block) </li><br>    <li>position（absolute，fixed） </li><br>    <li>fieldset元素</li><br></ul>

<h3 id="hasLayout"><a href="#hasLayout" class="headerlink" title="hasLayout"></a>hasLayout</h3><p>从表现上来说，hasLayout可以等同于BFC，IE6-7通过触发hasLayout闭合浮动<br>触发hasLayout的条件：</p>
<ul><br>    <li>position: absolute </li><br>    <li>float: left|right </li><br>    <li>display: inline-block </li><br>    <li>width: 除 “auto” 外的任意值</li><br>    <li>height: 除 “auto” 外的任意值 （例如很多人闭合浮动会用到 height: 1%  ） </li><br>    <li>zoom: 除 “normal” 外的任意值</li><br>    <li>writing-mode: tb-rl</li><br></ul><br>在 IE7 中，overflow 也变成了一个 layout 触发器：<br><br><ul><br>    <li>overflow: hidden|scroll|auto （ 这个属性在IE之前版本中没有触发 layout 的功能。 ）</li><br>    <li>overflow-x|-y: hidden|scroll|auto （CSS3 盒模型中的属性，尚未得到浏览器的广泛支持。他们在之前IE版本中同样没有触发 layout 的功能）</li><br></ul><br>综上所述：<br><ul><br>    <li><span class="key">在支持BFC的浏览器（IE8+，firefox，chrome，safari）通过创建新的BFC闭合浮动；</span></li><br>    <li><span class="key">在不支持 BFC的浏览器 （IE6-7），通过触发 hasLayout 闭合浮动。</span>    </li><br></ul>

<h2 id="四、使用-after-伪元素"><a href="#四、使用-after-伪元素" class="headerlink" title="四、使用:after 伪元素"></a>四、使用:after 伪元素</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;	</div><div class="line"> 	<span class="attribute">content</span>:<span class="string">"."</span>;		<span class="comment">/*生成内容作为最后一个元素，至于content里面是点还是其他都是可以的*/</span></div><div class="line"> 	<span class="attribute">display</span>:block;  	<span class="comment">/*使生成的元素以块级元素显示,占满剩余空间*/</span></div><div class="line"> 	<span class="attribute">height</span>:<span class="number">0</span>;			<span class="comment">/*避免生成内容破坏原有布局的高度*/</span></div><div class="line"> 	<span class="attribute">visibility</span>:hidden;	<span class="comment">/*使生成的内容不可见，并允许可能被生成内容盖住的内容可以进行点击和交互*/</span></div><div class="line"> 	<span class="attribute">clear</span>:both; </div><div class="line">&#125;</div><div class="line">.clearfix &#123; *zoom:1; &#125;  /*由于IE6-7不支持:after，使用 zoom:1触发 hasLayout。*/</div></pre></td></tr></table></figure>
<p>通过分析发现，除了clear：both用来闭合浮动的，其他代码无非都是为了隐藏掉content生成的内容，这也就是其他版本的闭合浮动为什么会有font-size：0，line-height：0。 <br><br><br><br>clearfix改良方法：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">.clearfix:before,</div><div class="line">.clearfix:after &#123;</div><div class="line">  content: <span class="string">"."</span>;</div><div class="line">  display: block;</div><div class="line">  height: <span class="number">0</span>;</div><div class="line">  visibility: hidden;</div><div class="line">&#125;</div><div class="line">.clearfix:after &#123;<span class="attr">clear</span>: both;&#125;</div><div class="line">.clearfix &#123;<span class="attr">zoom</span>: <span class="number">1</span>;&#125; <span class="comment">/*IE &lt; 8 */</span></div></pre></td></tr></table></figure></p>
<p>这个方法可以防止两个盒模型边距叠加</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>一丝冰凉：<a class="reference" href="http://www.iyunlu.com/view/css-xhtml/55.html" target="_blank">那些年我们一起清除过的浮动</a><br><br>一丝冰凉：<a class="reference" href="http://www.iyunlu.com/view/css-xhtml/56.html" target="_blank">clearfix改良及overflow:hidden详解【译文】</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、为何要闭合浮动？&quot;&gt;&lt;a href=&quot;#一、为何要闭合浮动？&quot; class=&quot;headerlink&quot; title=&quot;一、为何要闭合浮动？&quot;&gt;&lt;/a&gt;一、为何要闭合浮动？&lt;/h2&gt;&lt;p&gt;普通流：将窗体自上而下分成一行行, 并在每行中按从左至右的顺序排放元素,即为
    
    </summary>
    
      <category term="CSS" scheme="http://www.yanjiazhen.com/categories/css/"/>
    
    
      <category term="CSS" scheme="http://www.yanjiazhen.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>Ajax基础知识</title>
    <link href="http://www.yanjiazhen.com/2014/09/ajax.html"/>
    <id>http://www.yanjiazhen.com/2014/09/ajax.html</id>
    <published>2014-09-06T12:08:52.000Z</published>
    <updated>2017-07-31T05:26:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h2><p>指一种创建交互式网页应用的网页开发技术，通过在后台与服务器进行少量数据交换，可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新，另外，虽然名字中包含XML成分，但Ajax通信与数据格式无关，这种技术从后台服务器取得的数据不一定是XML数据。</p>
<h2 id="二、工作原理"><a href="#二、工作原理" class="headerlink" title="二、工作原理"></a>二、工作原理</h2><p><img class="img" src="/media/images/ajax_how_it_works.png"><br></p>
<ol>
<li>客户端调用Javascript函数<br></li>
<li>Javascript函数创建一个XMLHttpRequest对象，XMLHttpRequest对象指定服务器响应后的回调函数<br></li>
<li>XMLHttpRequest对象发送异步HTTP请求到服务器<br></li>
<li>Web服务器处理请求，然后返回指定格式的数据<br></li>
<li>在服务器响应之后，调用回调函数<br></li>
<li>客户端更新HTML/CSS<br></li>
</ol>
<h2 id="三、创建XMLHttpRequest对象"><a href="#三、创建XMLHttpRequest对象" class="headerlink" title="三、创建XMLHttpRequest对象"></a>三、创建XMLHttpRequest对象</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</div></pre></td></tr></table></figure>
<p>如果是ie6，应该这样创建<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">"Msxml2.XMLHTTP"</span>);</div><div class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</div></pre></td></tr></table></figure></p>
<p>利用try catch包装<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest || <span class="built_in">window</span>.ActiveXObject) &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.ActiveXObject) &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">"Msxml2.XMLHTTP"</span>);</div><div class="line">        &#125; <span class="keyword">catch</span>(exception) &#123;</div><div class="line">            xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        xhr = <span class="keyword">new</span> XMLHttpRequest(); </div><div class="line">    &#125;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    alert(<span class="string">"Your browser does not support XMLHTTP Request...!"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="四、open-方法"><a href="#四、open-方法" class="headerlink" title="四、open()方法"></a>四、open()方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">open( <span class="string">"method"</span>, <span class="string">"URL"</span>, asynchronous_flag)</div></pre></td></tr></table></figure>
<p>method:：GET, POST, PUT, DELETE等等<br><br>URL： 请求地址<br>asynchronous_flag：异步请求标志，默认为true，异步请求</p>
<h2 id="五、发送请求send"><a href="#五、发送请求send" class="headerlink" title="五、发送请求send()"></a>五、发送请求send()</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">xhr.send(<span class="literal">null</span>); <span class="comment">//不发送参数</span></div><div class="line">xhr.send(<span class="string">"name=raimonfuns&amp;address=guangzhou"</span>);  <span class="comment">//发送name、address参数</span></div></pre></td></tr></table></figure>
<h2 id="六、响应"><a href="#六、响应" class="headerlink" title="六、响应"></a>六、响应</h2><p>在收到响应之后，响应的数据会自定填充XHR对象的属性，相关属性如下：</p>
<p><ul><br>    <li>responseText：被返回的文本</li><br>    <li>responseXML：如果响应的内容类型是”text/xml”或”application/xml”，这个属性中将包含着响应数据的XML DOM文档，如果是非XML数据而言，这个属性值为null</li><br>    <li>status：响应的HTTP状态</li><br>    <li>statusText：HTTP状态的说明，跨浏览器时不太可靠，不建议使用</li><br></ul><br>一般将HTTP状态码200作为成功的标志，此外，状态码为304表示请求的资源并没有被修改，可以直接使用浏览器中缓存的版本，当然，也意味着响应是有效的，为确保收到适当的响应，应该像下面这样检查上述的这两种状态码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ((xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) || xhr.status == <span class="number">304</span>) &#123;</div><div class="line">    alert(xhr.responseText);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    alert(<span class="string">"Request was unsuccessful "</span> + xhr.status);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="七、利用onreadystatechange设置回调函数"><a href="#七、利用onreadystatechange设置回调函数" class="headerlink" title="七、利用onreadystatechange设置回调函数"></a>七、利用onreadystatechange设置回调函数</h2><p>readyState属性的值如下：</p>
<p><ul><br>    <li>0：未初始化</li><br>    <li>1：启动</li><br>    <li>2：发送</li><br>    <li>3：接受。已经接收部分响应数据</li><br>    <li>4：完成。已经接收受全部响应数据，而且可以再客户端使用</li><br></ul><br>只要readyState属性的值变化，就会触发onreadystatechange事件，通常，我们只对readyState值为4的阶段感兴趣，因为这时所有数据的准备就绪了，<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123;</div><div class="line">        <span class="keyword">if</span> ((xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) || xhr.status == <span class="number">304</span>) &#123;</div><div class="line">            alert(xhr.responseText);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            alert(<span class="string">"Request was unsuccessful "</span> + xhr.status);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>也可以写成<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (xhr.DONE) &#123;</div><div class="line">        alert(xhr.responseText);</div><div class="line">     &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>在onreadystatechange事件处理程序中使用xhr对象而不使用this是因为有点浏览器使用this会导致报错，所以使用实际的XHR对象实例变量是较为可靠的一种方式</p>
<h2 id="八、setRequestHeader-方法"><a href="#八、setRequestHeader-方法" class="headerlink" title="八、setRequestHeader()方法"></a>八、setRequestHeader()方法</h2><p>该方法可设置自定义的请求头部信息，接收两个参数，头部字段的名称和头部字段的值，要成功发送请求头部信息，必须在调用open ()，方法之后且调用send()方法之前调用setRequestHeader()</p>
<h2 id="九、自己封装的ajax函数"><a href="#九、自己封装的ajax函数" class="headerlink" title="九、自己封装的ajax函数"></a>九、自己封装的ajax函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">options</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> xhr = <span class="literal">null</span>;</div><div class="line">    <span class="keyword">var</span> options = options || &#123;&#125;;</div><div class="line">    options.type = options.type || <span class="string">'post'</span>;</div><div class="line">    options.data = options.data || &#123;&#125;;</div><div class="line">    options.async = options.async || <span class="literal">true</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;</div><div class="line">        xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        xhr = <span class="keyword">new</span> ActiveXObject();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> type = options.type.toLowerCase();</div><div class="line">    <span class="keyword">if</span> (type === <span class="string">'get'</span>) &#123;</div><div class="line">        xhr.open(options.type, options.url + <span class="string">'?'</span> + processData(options.data) , options.async);</div><div class="line">        xhr.send();</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="string">'post'</span>) &#123;</div><div class="line">        xhr.open(options.type, options.url, options.async);</div><div class="line">        xhr.setRequestHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>);</div><div class="line">        xhr.send(processData(options.data));</div><div class="line">    &#125;    </div><div class="line"></div><div class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>) &#123;</div><div class="line">            <span class="keyword">if</span> ((xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.status &lt; <span class="number">300</span>) || xhr.status == <span class="number">304</span>) &#123;</div><div class="line">                options.success(xhr.responseText);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">if</span> (options.fail) &#123;</div><div class="line">                    options.fail(xhr.responseText);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">processData</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> aData = [];</div><div class="line">        <span class="keyword">var</span> sData = <span class="string">''</span>;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> data === <span class="string">'object'</span>) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> data) &#123;</div><div class="line">                <span class="keyword">if</span> (data.hasOwnProperty(i)) &#123;</div><div class="line">                    aData.push(i + <span class="string">'='</span> + data[i]);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        sData = aData.join(<span class="string">'&amp;'</span>);</div><div class="line">        <span class="keyword">return</span> sData;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、概念&quot;&gt;&lt;a href=&quot;#一、概念&quot; class=&quot;headerlink&quot; title=&quot;一、概念&quot;&gt;&lt;/a&gt;一、概念&lt;/h2&gt;&lt;p&gt;指一种创建交互式网页应用的网页开发技术，通过在后台与服务器进行少量数据交换，可以使网页实现异步更新。这意味着可以在不重新加载
    
    </summary>
    
      <category term="JavaScript" scheme="http://www.yanjiazhen.com/categories/javascript/"/>
    
    
      <category term="JS" scheme="http://www.yanjiazhen.com/tags/js/"/>
    
      <category term="JavaScript" scheme="http://www.yanjiazhen.com/tags/javascript/"/>
    
  </entry>
  
</feed>
